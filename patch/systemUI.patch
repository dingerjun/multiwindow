commit 6f3aecc089f64c4818e737529cb534e2c6e571af
Author: liming11 <liming11@lenovo.com>
Date:   Tue Apr 22 17:51:41 2014 +0800

    [BLADE10_FHD_KK][BLADEFHDKK-35][liming11]:the change of SystemUI for the new feature of multi-window
    
    Change-Id: I0834365224a20ba5c996d8dc084bd9f794d87eac

diff --git a/packages/SystemUI/Android.mk b/packages/SystemUI/Android.mk
index 7c07b7d..33eb1c6 100644
--- a/packages/SystemUI/Android.mk
+++ b/packages/SystemUI/Android.mk
@@ -6,7 +6,7 @@ LOCAL_MODULE_TAGS := optional
 LOCAL_SRC_FILES := $(call all-java-files-under, src) \
     src/com/android/systemui/EventLogTags.logtags
 
-LOCAL_JAVA_LIBRARIES := telephony-common
+LOCAL_JAVA_LIBRARIES := services telephony-common
 
 ifdef DOLBY_DAP
 LOCAL_JAVA_LIBRARIES += dolby_ds
@@ -15,7 +15,7 @@ endif #DOLBY_END
 LOCAL_PACKAGE_NAME := SystemUI
 LOCAL_CERTIFICATE := platform
 LOCAL_PRIVILEGED_MODULE := true
-
+LOCAL_STATIC_JAVA_LIBRARIES += android-support-v4
 LOCAL_PROGUARD_FLAG_FILES := proguard.flags
 
 include $(BUILD_PACKAGE)
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 76fc7a5..eff4d45 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -93,6 +93,10 @@
             android:exported="true"
             />
 
+        <!-- service to show/hide split bar -->
+        <service android:name=".splitbar.FloatingWindowService"
+            android:exported="false" />
+
         <!-- started from PhoneWindowManager
              TODO: Should have an android:permission attribute -->
         <service android:name=".screenshot.TakeScreenshotService"
@@ -125,6 +129,10 @@
                 android:excludeFromRecents="true">
         </activity>
 
+        <activity android:name=".lenovo.usrguide.usrguideActivity"
+                android:launchMode="singleInstance"
+                android:exported="true">
+        </activity>
         <activity android:name=".recent.RecentsActivity"
                 android:label="@string/accessibility_desc_recent_apps"
                 android:theme="@style/RecentsStyle"
diff --git a/packages/SystemUI/res/anim/lenovo_status_bar_recent_enter_animation.xml b/packages/SystemUI/res/anim/lenovo_status_bar_recent_enter_animation.xml
new file mode 100644
index 0000000..4d64de8
--- /dev/null
+++ b/packages/SystemUI/res/anim/lenovo_status_bar_recent_enter_animation.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+ 	<alpha 
+ 	    android:interpolator="@android:anim/accelerate_interpolator"
+		android:fromAlpha="0.0"
+		android:toAlpha="1.0"
+       	android:duration="300" /> 
+</set>
diff --git a/packages/SystemUI/res/anim/lenovo_status_bar_recent_usrguide.xml b/packages/SystemUI/res/anim/lenovo_status_bar_recent_usrguide.xml
new file mode 100644
index 0000000..e49494d
--- /dev/null
+++ b/packages/SystemUI/res/anim/lenovo_status_bar_recent_usrguide.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<set xmlns:android="http://schemas.android.com/apk/res/android"
+    android:interpolator="@android:anim/linear_interpolator">
+    <translate 
+        android:fromXDelta="0.0"
+        android:toXDelta="0.0"
+        android:fromYDelta="-100"
+        android:toYDelta="100"
+        android:duration="2000"
+        android:repeatCount="20"
+        android:repeatMode="reverse"
+        />
+</set>
diff --git a/packages/SystemUI/res/anim/lenovo_status_bar_recents_preview_enter.xml b/packages/SystemUI/res/anim/lenovo_status_bar_recents_preview_enter.xml
new file mode 100644
index 0000000..f25afe6
--- /dev/null
+++ b/packages/SystemUI/res/anim/lenovo_status_bar_recents_preview_enter.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+** Copyright 2012, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<set xmlns:android="http://schemas.android.com/apk/res/android"
+     android:shareInterpolator="false"
+     android:zAdjustment="normal">
+  <scale android:fromXScale="2.0" android:toXScale="1.0"
+         android:fromYScale="2.0" android:toYScale="1.0"
+         android:interpolator="@android:interpolator/decelerate_cubic"
+         android:pivotX="50%p" android:pivotY="50%p"
+         android:duration="250" />
+  <alpha android:fromAlpha="0.0" android:toAlpha="1.0"
+         android:interpolator="@android:interpolator/decelerate_cubic"
+         android:duration="300"/>
+</set>
diff --git a/packages/SystemUI/res/anim/lenovo_status_bar_recents_preview_exit.xml b/packages/SystemUI/res/anim/lenovo_status_bar_recents_preview_exit.xml
new file mode 100644
index 0000000..ec3f2ae
--- /dev/null
+++ b/packages/SystemUI/res/anim/lenovo_status_bar_recents_preview_exit.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+** Copyright 2012, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<set xmlns:android="http://schemas.android.com/apk/res/android"
+     android:shareInterpolator="false"
+     android:zAdjustment="normal">
+  <scale android:fromXScale="1.0" android:toXScale="2.0"
+         android:fromYScale="1.0" android:toYScale="2.0"
+         android:interpolator="@android:interpolator/decelerate_cubic"
+         android:pivotX="50%p" android:pivotY="50%p"
+         android:duration="250" />
+  <alpha android:fromAlpha="1.0" android:toAlpha="0.0"
+         android:interpolator="@android:interpolator/decelerate_cubic"
+         android:duration="300"/>
+</set>
diff --git a/packages/SystemUI/res/anim/recents_return_to_launcher_enter.xml b/packages/SystemUI/res/anim/recents_return_to_launcher_enter.xml
index efa9019..26b0f9d 100644
--- a/packages/SystemUI/res/anim/recents_return_to_launcher_enter.xml
+++ b/packages/SystemUI/res/anim/recents_return_to_launcher_enter.xml
@@ -20,7 +20,12 @@
 <set xmlns:android="http://schemas.android.com/apk/res/android"
      android:shareInterpolator="false"
      android:zAdjustment="normal">
+  <scale android:fromXScale="0.0" android:toXScale="1.0"
+         android:fromYScale="0.0" android:toYScale="1.0"
+         android:interpolator="@android:interpolator/decelerate_cubic"
+         android:pivotX="50%p" android:pivotY="50%p"
+         android:duration="250" />
   <alpha android:fromAlpha="0.0" android:toAlpha="1.0"
          android:interpolator="@android:interpolator/decelerate_cubic"
-         android:duration="250"/>
+         android:duration="300"/>
 </set>
diff --git a/packages/SystemUI/res/anim/recents_return_to_launcher_exit.xml b/packages/SystemUI/res/anim/recents_return_to_launcher_exit.xml
index e95e667..e7d2051 100644
--- a/packages/SystemUI/res/anim/recents_return_to_launcher_exit.xml
+++ b/packages/SystemUI/res/anim/recents_return_to_launcher_exit.xml
@@ -20,11 +20,11 @@
 <set xmlns:android="http://schemas.android.com/apk/res/android"
      android:shareInterpolator="false"
      android:zAdjustment="normal">
-  <!--scale android:fromXScale="1.0" android:toXScale="2.0"
-         android:fromYScale="1.0" android:toYScale="2.0"
+  <scale android:fromXScale="1.0" android:toXScale="0.0"
+         android:fromYScale="1.0" android:toYScale="0.0"
          android:interpolator="@android:interpolator/decelerate_cubic"
          android:pivotX="50%p" android:pivotY="50%p"
-         android:duration="250" /-->
+         android:duration="250" />
   <alpha android:fromAlpha="1.0" android:toAlpha="0.0"
          android:interpolator="@android:interpolator/decelerate_cubic"
          android:duration="250"/>
diff --git a/packages/SystemUI/res/drawable-hdpi/add.png b/packages/SystemUI/res/drawable-hdpi/add.png
new file mode 100644
index 0000000..c9b222f
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/add.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/btn_recent_normal.png b/packages/SystemUI/res/drawable-hdpi/btn_recent_normal.png
new file mode 100644
index 0000000..2260f9b
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/btn_recent_normal.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/btn_recent_pressed.png b/packages/SystemUI/res/drawable-hdpi/btn_recent_pressed.png
new file mode 100644
index 0000000..b7a96ec
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/btn_recent_pressed.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/close.png b/packages/SystemUI/res/drawable-hdpi/close.png
new file mode 100644
index 0000000..e8fed9a
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/close.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/max_window.png b/packages/SystemUI/res/drawable-hdpi/max_window.png
new file mode 100644
index 0000000..ed8a46a
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/max_window.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recent_bottom_bg.png b/packages/SystemUI/res/drawable-hdpi/recent_bottom_bg.png
new file mode 100644
index 0000000..2e6e6e4
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recent_bottom_bg.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recent_line_bg.png b/packages/SystemUI/res/drawable-hdpi/recent_line_bg.png
new file mode 100644
index 0000000..7fe33de
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recent_line_bg.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recent_orientation_usrguide_bg_0.png b/packages/SystemUI/res/drawable-hdpi/recent_orientation_usrguide_bg_0.png
new file mode 100644
index 0000000..8f7402d
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recent_orientation_usrguide_bg_0.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recent_orientation_usrguide_bg_1.png b/packages/SystemUI/res/drawable-hdpi/recent_orientation_usrguide_bg_1.png
new file mode 100644
index 0000000..a6683b4
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recent_orientation_usrguide_bg_1.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recent_orientation_usrguide_bg_2.png b/packages/SystemUI/res/drawable-hdpi/recent_orientation_usrguide_bg_2.png
new file mode 100644
index 0000000..69e241d
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recent_orientation_usrguide_bg_2.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recent_portrait_usrguide_bg_0.png b/packages/SystemUI/res/drawable-hdpi/recent_portrait_usrguide_bg_0.png
new file mode 100644
index 0000000..20bc8d7
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recent_portrait_usrguide_bg_0.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recent_portrait_usrguide_bg_1.png b/packages/SystemUI/res/drawable-hdpi/recent_portrait_usrguide_bg_1.png
new file mode 100644
index 0000000..d65b01e
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recent_portrait_usrguide_bg_1.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recent_portrait_usrguide_bg_2.png b/packages/SystemUI/res/drawable-hdpi/recent_portrait_usrguide_bg_2.png
new file mode 100644
index 0000000..782af7a
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recent_portrait_usrguide_bg_2.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recents_previewin_blue_bg.9.png b/packages/SystemUI/res/drawable-hdpi/recents_previewin_blue_bg.9.png
new file mode 100644
index 0000000..f15a407
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recents_previewin_blue_bg.9.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recents_previewin_forbid_bg.9.png b/packages/SystemUI/res/drawable-hdpi/recents_previewin_forbid_bg.9.png
new file mode 100644
index 0000000..5c8caa5
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recents_previewin_forbid_bg.9.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recents_previewin_ntp_bg.9.png b/packages/SystemUI/res/drawable-hdpi/recents_previewin_ntp_bg.9.png
new file mode 100644
index 0000000..93fe90f
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recents_previewin_ntp_bg.9.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/recents_previewin_tp_bg.9.png b/packages/SystemUI/res/drawable-hdpi/recents_previewin_tp_bg.9.png
new file mode 100644
index 0000000..ba8dd03
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/recents_previewin_tp_bg.9.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/resize.png b/packages/SystemUI/res/drawable-hdpi/resize.png
new file mode 100644
index 0000000..a34af48
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/resize.png differ
diff --git a/packages/SystemUI/res/drawable-hdpi/switch_button_bg.png b/packages/SystemUI/res/drawable-hdpi/switch_button_bg.png
new file mode 100644
index 0000000..1a6d07c
Binary files /dev/null and b/packages/SystemUI/res/drawable-hdpi/switch_button_bg.png differ
diff --git a/packages/SystemUI/res/drawable/panel_animation_background_drawable.xml b/packages/SystemUI/res/drawable/panel_animation_background_drawable.xml
new file mode 100644
index 0000000..1228296
--- /dev/null
+++ b/packages/SystemUI/res/drawable/panel_animation_background_drawable.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>       
+        <shape>
+            <solid android:color="#80FFA7A7"/>
+            <stroke
+                android:width="2dp"
+                android:color="#80ff0000" />
+            <corners 
+                android:topRightRadius="5dp"
+                android:bottomLeftRadius="5dp"
+                android:topLeftRadius="5dp"
+                android:bottomRightRadius="5dp"
+            />
+
+        </shape>
+    </item>
+</selector>
diff --git a/packages/SystemUI/res/drawable/panel_background_drawable.xml b/packages/SystemUI/res/drawable/panel_background_drawable.xml
new file mode 100644
index 0000000..a035ad5
--- /dev/null
+++ b/packages/SystemUI/res/drawable/panel_background_drawable.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>       
+        <shape>
+            <solid android:color="#50FFFFFF"/>
+            <stroke
+                android:width="2dp"
+                android:color="#80ff0000" />
+            <corners 
+                android:topRightRadius="5dp"
+                android:bottomLeftRadius="5dp"
+                android:topLeftRadius="5dp"
+                android:bottomRightRadius="5dp"
+            />
+
+        </shape>
+    </item>
+</selector>
diff --git a/packages/SystemUI/res/drawable/panel_filled_background_drawable.xml b/packages/SystemUI/res/drawable/panel_filled_background_drawable.xml
new file mode 100644
index 0000000..c2904bb
--- /dev/null
+++ b/packages/SystemUI/res/drawable/panel_filled_background_drawable.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>       
+        <shape>
+            <solid android:color="#80F0B6B6"/>
+            <stroke
+                android:width="2dp"
+                android:color="#80ff0000" />
+            <corners 
+                android:topRightRadius="5dp"
+                android:bottomLeftRadius="5dp"
+                android:topLeftRadius="5dp"
+                android:bottomRightRadius="5dp"
+            />
+
+        </shape>
+    </item>
+</selector>
diff --git a/packages/SystemUI/res/drawable/panel_hover_background_drawable.xml b/packages/SystemUI/res/drawable/panel_hover_background_drawable.xml
new file mode 100644
index 0000000..c2904bb
--- /dev/null
+++ b/packages/SystemUI/res/drawable/panel_hover_background_drawable.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>       
+        <shape>
+            <solid android:color="#80F0B6B6"/>
+            <stroke
+                android:width="2dp"
+                android:color="#80ff0000" />
+            <corners 
+                android:topRightRadius="5dp"
+                android:bottomLeftRadius="5dp"
+                android:topLeftRadius="5dp"
+                android:bottomRightRadius="5dp"
+            />
+
+        </shape>
+    </item>
+</selector>
diff --git a/packages/SystemUI/res/drawable/panel_seeker_background_drawable.xml b/packages/SystemUI/res/drawable/panel_seeker_background_drawable.xml
new file mode 100644
index 0000000..4ab2a47
--- /dev/null
+++ b/packages/SystemUI/res/drawable/panel_seeker_background_drawable.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>       
+        <shape>
+            <solid android:color="#80000000"/>
+            <stroke
+                android:width="1dp"
+                android:color="#803FADD0" />
+            <corners 
+                android:topRightRadius="2dp"
+                android:bottomLeftRadius="2dp"
+                android:topLeftRadius="2dp"
+                android:bottomRightRadius="2dp"
+            />
+
+        </shape>
+    </item>
+</selector>
diff --git a/packages/SystemUI/res/drawable/recent_button_bg.xml b/packages/SystemUI/res/drawable/recent_button_bg.xml
new file mode 100644
index 0000000..9b681de
--- /dev/null
+++ b/packages/SystemUI/res/drawable/recent_button_bg.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" android:drawable="@drawable/btn_recent_pressed" />
+    <item android:drawable="@drawable/btn_recent_normal" />
+</selector>
diff --git a/packages/SystemUI/res/drawable/split_drag_background_drawable.xml b/packages/SystemUI/res/drawable/split_drag_background_drawable.xml
new file mode 100644
index 0000000..5514065
--- /dev/null
+++ b/packages/SystemUI/res/drawable/split_drag_background_drawable.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape>
+            <solid android:color="#70004556"/>
+            <stroke
+                android:width="2dp"
+                android:color="#00004556" />
+            <corners
+                android:topRightRadius="5dp"
+                android:bottomLeftRadius="5dp"
+                android:topLeftRadius="5dp"
+                android:bottomRightRadius="5dp"
+            />
+
+        </shape>
+    </item>
+</selector>
diff --git a/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_activity.xml b/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_activity.xml
new file mode 100644
index 0000000..699676d
--- /dev/null
+++ b/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_activity.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" >
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/view_pager"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:flipInterval="30"
+        android:persistentDrawingCache="animation" />
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="bottom|center_horizontal"
+        android:gravity="center"
+        android:orientation="horizontal"
+        android:layout_marginBottom="60dp">
+
+        <!--ImageButton
+            android:id="@+id/first_dot"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:scaleType="fitXY"
+            android:background="@drawable/recent_usrguide_dot" />
+
+        <ImageButton
+            android:id="@+id/second_dot"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:scaleType="fitXY"
+            android:background="@drawable/recent_usrguide_dot"
+            android:layout_marginStart="5dp" /-->
+    </LinearLayout>
+
+</FrameLayout>
diff --git a/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_first.xml b/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_first.xml
new file mode 100644
index 0000000..d000282
--- /dev/null
+++ b/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_first.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:layoutDirection="ltr"
+    android:background="@drawable/recent_orientation_usrguide_bg_0" >
+
+    <RelativeLayout
+        android:id="@+id/all"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent" >
+	<TextView
+		android:id="@+id/guide_prompt_sub_0"
+		android:layout_width="wrap_content"
+		android:layout_height="match_parent"
+		android:layout_marginTop="440dp"
+		android:layout_marginLeft="480dp"
+		android:text="@string/guide_prompt_info0"
+		android:textSize="30dp"
+		android:textColor="#FFFFFF"/>
+	<TextView
+		android:id="@+id/guide_prompt_sub_1"
+		android:layout_width="wrap_content"
+		android:layout_height="match_parent"
+		android:layout_marginTop="620dp"
+		android:layout_marginLeft="620dp"
+		android:text="@string/guide_prompt_info2"
+		android:textSize="30dp"
+		android:textColor="#FFFFFF"/>
+    </RelativeLayout>
+
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_second.xml b/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_second.xml
new file mode 100644
index 0000000..616d524
--- /dev/null
+++ b/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_second.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="@drawable/recent_orientation_usrguide_bg_1" >
+
+    <RelativeLayout
+        android:id="@+id/all"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent">
+	<TextView
+		android:id="@+id/guide_prompt_sub_2"
+		android:layout_width="wrap_content"
+		android:layout_height="match_parent"
+		android:layout_alignParentRight="true"
+		android:layout_marginTop="330dp"
+		android:layout_marginRight="170dp"
+		android:text="@string/guide_prompt_info1"
+		android:textSize="30dp"
+		android:textColor="#FFFFFF"/>
+    </RelativeLayout>
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_third.xml b/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_third.xml
new file mode 100644
index 0000000..4fd2d62
--- /dev/null
+++ b/packages/SystemUI/res/layout-land/lenovo_recent_usrguide_third.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="@drawable/recent_orientation_usrguide_bg_2" >
+
+    <RelativeLayout
+        android:id="@+id/all"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent">
+	<TextView
+		android:id="@+id/guide_prompt_sub_3"
+		android:layout_width="wrap_content"
+		android:layout_height="match_parent"
+		android:layout_alignParentRight="true"
+		android:layout_marginTop="190dp"
+		android:layout_marginRight="210dp"
+		android:text="@string/guide_prompt_info3"
+		android:textSize="30dp"
+		android:textColor="#FFFFFF"/>
+        <Button
+            android:id="@+id/recent_start_bt"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentBottom="true"
+            android:layout_centerHorizontal="true"
+            android:textSize="30dp"
+            android:text="@string/guide_close" />
+    </RelativeLayout>
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout-land/lenovo_status_bar_all_apps_launcher.xml b/packages/SystemUI/res/layout-land/lenovo_status_bar_all_apps_launcher.xml
new file mode 100644
index 0000000..2f7bd4e
--- /dev/null
+++ b/packages/SystemUI/res/layout-land/lenovo_status_bar_all_apps_launcher.xml
@@ -0,0 +1,54 @@
+<HorizontalScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_alignParentBottom="true"
+    android:layout_gravity="top|right"
+    android:paddingBottom="16dp"
+    android:paddingTop="20dp"
+    android:scrollbars="none" >
+
+
+	<LinearLayout
+	    android:layout_width="match_parent"
+	    android:layout_height="match_parent"
+	    android:orientation="vertical"
+        android:paddingStart="30dp"
+        android:paddingEnd="30dp"
+	    android:layoutDirection="ltr"
+	    android:layout_gravity="left" >
+		
+	    <GridView
+			android:id="@+id/apps_launcher_sub0"
+			android:layout_width="match_parent" 
+			android:layout_height="wrap_content"
+			android:layout_alignParentRight="true"
+			android:columnWidth="@dimen/recents_all_apps_columnWidth"
+			android:numColumns="auto_fit"
+			android:scrollbars="none"
+			android:stretchMode="none"
+			android:horizontalSpacing="@dimen/recents_all_apps_horizontalSpacing"
+			android:verticalSpacing="20dp" />
+
+	    <LinearLayout
+			android:layout_width="match_parent"
+			android:layout_height="16dp"
+			android:layoutDirection="ltr"
+			android:layout_gravity="left">
+	    </LinearLayout>
+
+	    <GridView
+			android:id="@+id/apps_launcher_sub1"
+			android:layout_width="match_parent" 
+			android:layout_height="wrap_content"
+			android:layout_alignParentRight="true"
+			android:columnWidth="@dimen/recents_all_apps_columnWidth"
+			android:numColumns="auto_fit"
+			android:scrollbars="none"
+			android:stretchMode="none"
+			android:horizontalSpacing="@dimen/recents_all_apps_horizontalSpacing"
+			android:verticalSpacing="20dp" />
+	</LinearLayout>
+</HorizontalScrollView>
+
+
diff --git a/packages/SystemUI/res/layout-land/lenovo_status_bar_recent_panel.xml b/packages/SystemUI/res/layout-land/lenovo_status_bar_recent_panel.xml
new file mode 100644
index 0000000..619eb8d
--- /dev/null
+++ b/packages/SystemUI/res/layout-land/lenovo_status_bar_recent_panel.xml
@@ -0,0 +1,188 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* apps/common/assets/default/default/skins/StatusBar.xml
+**
+** Copyright 2010, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:systemui="http://schemas.android.com/apk/res/com.android.systemui"
+    android:id="@+id/status_bar_recents_layout"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="#66000000">
+
+<!--1begin-->
+    <FrameLayout
+        android:id="@+id/recents_panel_indicator"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="horizontal"
+        android:paddingBottom="290dp"
+        android:paddingLeft="286dp"
+        android:paddingRight="286dp"
+        android:paddingTop="20dp"
+        android:visibility="invisible" >
+        <include
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        layout="@layout/lenovo_status_bar_recent_preview"/>
+<!--the true one end-->
+        <ImageView
+            android:id="@+id/sub_forbid_panel"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:visibility="invisible"/>
+    </FrameLayout>
+<!--1end-->
+
+<!--2,3,4begin-->
+    <RelativeLayout
+        android:id="@+id/status_bar_recents_bottom"
+        android:layout_width="fill_parent"
+        android:layout_height="270dp"
+        android:layout_alignParentBottom="true"
+        android:background="@drawable/recent_bottom_bg"
+        android:orientation="vertical" >
+    <!--2begin-->
+        <LinearLayout
+            android:id="@+id/sub_recents_bottom_0"
+            android:layout_width="fill_parent"
+            android:layout_height="44dp"
+            android:layout_alignParentBottom="true"
+            android:layout_marginBottom="226dip"
+            android:orientation="horizontal" >
+
+    <!--Relative layout for prompt begin-->
+            <RelativeLayout
+                android:id="@+id/recents_panel_prompt"
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent" >
+
+                <TextView
+                    android:id="@+id/prompt_sub_0"
+                    android:layout_width="wrap_content"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent ="true"
+                    android:layout_alignParentTop="true"
+                    android:layout_marginTop="5dp"
+                    android:text="@string/prompt_info"
+                    android:textSize="24dp"
+                    android:textColor="#FFFFFF"/>
+                <RelativeLayout
+                    android:id="@+id/recents_panel_prompt"
+                    android:layout_width="56dp"
+                    android:layout_height="55dp"
+                    android:background="@drawable/switch_button_bg"
+                    android:layout_alignParentRight="true"
+                    android:layout_marginRight="20dp" >
+                    <ImageButton
+                        android:id="@+id/prompt_sub_1"
+                        android:layout_width="29dp"
+                        android:layout_height="23dp"
+                        android:layout_centerInParent ="true"
+                        android:background="@drawable/recent_button_bg"
+                        android:textColor="#FFFFFF"
+                        style="?android:attr/buttonBarButtonStyle"
+                        android:visibility="visible"
+                    />
+                </RelativeLayout>
+            </RelativeLayout>
+    <!--Relative layout for prompt end-->
+        </LinearLayout>
+    <!--2end-->
+
+    <!--3begin-->
+        <LinearLayout
+        android:id="@+id/sub_recents_bottom_1"
+        android:layout_width="fill_parent"
+        android:layout_height="1dp"
+        android:layout_alignParentBottom="true"
+        android:layout_marginBottom="225dp"
+        android:background="@drawable/recent_line_bg" >
+        </LinearLayout>
+    <!--3end-->
+    <!--4begin-->
+
+        <LinearLayout
+        android:id="@+id/sub_recents_bottom_2"
+        android:layout_width="fill_parent"
+        android:layout_height="225dp"
+        android:layout_alignParentBottom="true"
+        android:orientation="horizontal" >
+
+        <com.android.systemui.recent.RecentsPanelView
+            android:id="@+id/recents_root"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            systemui:recentItemLayout="@layout/status_bar_recent_item" >
+
+        <!--recents apps icon begin-->
+            <FrameLayout
+            android:id="@+id/recents_bg_protect"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_alignParentBottom="true"
+            android:clipChildren="false"
+            android:clipToPadding="false" >
+
+            <com.android.systemui.recent.RecentsHorizontalScrollView
+                android:id="@+id/recents_container"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:layout_gravity="right"
+                android:fadingEdge="horizontal"
+                android:fadingEdgeLength="@dimen/status_bar_recents_scroll_fading_edge_length"
+                android:scrollbars="none" >
+
+                <LinearLayout
+                android:id="@+id/recents_linear_layout"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:layout_gravity="left"
+                android:fitsSystemWindows="true"
+                android:layoutDirection="ltr"
+                android:orientation="horizontal" >
+                </LinearLayout>
+            </com.android.systemui.recent.RecentsHorizontalScrollView>
+
+            <!--no apps icon begin-->
+                <include
+                android:id="@+id/recents_no_apps"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                layout="@layout/status_bar_no_recent_apps"
+                android:visibility="invisible" />
+            <!--no apps icon begin-->
+
+            </FrameLayout>
+        <!--recents apps icon end-->
+
+        <!--all apps icon begin-->
+            <include
+            android:id="@+id/all_apps_launcher"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            layout="@layout/lenovo_status_bar_all_apps_launcher"
+            android:visibility="invisible" />
+        <!--all apps icon end-->
+
+        </com.android.systemui.recent.RecentsPanelView>
+        </LinearLayout>
+
+    <!--4end-->
+</RelativeLayout>
+<!--2,3,4end-->
+</RelativeLayout>
diff --git a/packages/SystemUI/res/layout-land/lenovo_status_bar_recent_preview.xml b/packages/SystemUI/res/layout-land/lenovo_status_bar_recent_preview.xml
new file mode 100644
index 0000000..054d871
--- /dev/null
+++ b/packages/SystemUI/res/layout-land/lenovo_status_bar_recent_preview.xml
@@ -0,0 +1,93 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* apps/common/assets/default/default/skins/StatusBar.xml
+**
+** Copyright 2010, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+	android:layout_width="match_parent"
+	android:layout_height="match_parent"
+	android:layout_weight="20"
+	android:orientation="horizontal" >
+<!--the left begin-->
+	<LinearLayout
+		android:id="@+id/sub_layout_panel_1"
+		android:layout_width="0dp"
+		android:layout_height="match_parent"
+		android:layout_weight="10"
+		android:visibility="gone"
+		android:orientation="vertical" >
+		<ImageView
+			android:id="@+id/sub_panel_1"
+			android:layout_width="match_parent"
+			android:layout_height="0dp"
+			android:layout_weight="5"
+            android:src="@drawable/recents_previewin_ntp_bg"
+			android:visibility="gone" />
+		<View
+			android:id="@+id/spacing_0"
+			android:layout_width="match_parent"
+			android:layout_height="0dp"
+			android:layout_weight="0.1"
+			android:visibility="gone" />
+		<ImageView
+			android:id="@+id/sub_panel_4"
+			android:layout_width="match_parent"
+			android:layout_height="0dp"
+			android:layout_weight="5"
+			android:src="@drawable/recents_previewin_ntp_bg"
+			android:visibility="gone" />
+	</LinearLayout>
+<!--the left end-->
+		<View
+			android:id="@+id/spacing_1"
+			android:layout_width="0dp"
+			android:layout_height="match_parent"
+			android:layout_weight="0.2"
+			android:visibility="gone" />
+
+
+<!--the right begin-->
+	<LinearLayout
+		android:id="@+id/sub_layout_panel_2"
+		android:layout_width="0dp"
+		android:layout_height="match_parent"
+		android:layout_weight="10"
+		android:visibility="gone"
+		android:orientation="vertical"  >
+		<ImageView
+			android:id="@+id/sub_panel_2"
+			android:layout_width="match_parent"
+			android:layout_height="0dp"
+			android:layout_weight="5"
+			android:src="@drawable/recents_previewin_ntp_bg"
+			android:visibility="gone" />
+		<View
+			android:id="@+id/spacing_2"
+			android:layout_width="match_parent"
+			android:layout_height="0dp"
+			android:layout_weight="0.1"
+			android:visibility="gone" />
+		<ImageView
+			android:id="@+id/sub_panel_3"
+			android:layout_width="match_parent"
+			android:layout_height="0dp"
+			android:layout_weight="5"
+			android:src="@drawable/recents_previewin_ntp_bg"
+			android:visibility="gone" />
+	</LinearLayout>
+<!--the right end-->
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout-land/lenovo_status_bar_recent_usrguide.xml b/packages/SystemUI/res/layout-land/lenovo_status_bar_recent_usrguide.xml
new file mode 100644
index 0000000..89c9034
--- /dev/null
+++ b/packages/SystemUI/res/layout-land/lenovo_status_bar_recent_usrguide.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* apps/common/assets/default/default/skins/StatusBar.xml
+**
+** Copyright 2010, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+<RelativeLayout 
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@android:color/transparent" >
+	<TextView
+		android:id="@+id/guide_prompt_sub_0"
+		android:layout_width="wrap_content"
+		android:layout_height="match_parent"
+		android:layout_marginTop="320dp"
+		android:layout_marginLeft="70dp"
+		android:text="@string/guide_prompt_info0"
+		android:textSize="24dp"
+		android:textColor="#FFFFFF"/>
+	<TextView
+		android:id="@+id/guide_prompt_sub_1"
+		android:layout_width="wrap_content"
+		android:layout_height="match_parent"
+		android:layout_alignParentRight="true"
+		android:layout_marginTop="460dp"
+		android:layout_marginRight="150dp"
+		android:text="@string/guide_prompt_info1"
+		android:textSize="24dp"
+		android:textColor="#FFFFFF"/>
+</RelativeLayout>
diff --git a/packages/SystemUI/res/layout-land/status_bar_recent_item.xml b/packages/SystemUI/res/layout-land/status_bar_recent_item.xml
index 1257641..15e7d08 100644
--- a/packages/SystemUI/res/layout-land/status_bar_recent_item.xml
+++ b/packages/SystemUI/res/layout-land/status_bar_recent_item.xml
@@ -22,8 +22,8 @@
     xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_height="match_parent"
     android:layout_width="wrap_content"
-    android:paddingStart="@dimen/status_bar_recents_item_padding"
-    android:paddingEnd="@dimen/status_bar_recents_item_padding"
+    android:paddingStart="30dp"
+    android:paddingEnd="30dp"
     android:importantForAccessibility="no"
     android:clipChildren="false">
 
@@ -31,7 +31,7 @@
         android:layout_gravity="center_vertical"
         android:layout_height="wrap_content"
         android:layout_width="wrap_content"
-        android:paddingTop="@*android:dimen/status_bar_height"
+        android:paddingTop="10dip"
         android:clipChildren="false"
         android:clipToPadding="false">
 
@@ -66,15 +66,16 @@
         />
 
         <TextView android:id="@+id/app_label"
-            android:layout_width="@dimen/status_bar_recents_app_label_width"
+            android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:textSize="@dimen/status_bar_recents_app_label_text_size"
             android:fadingEdge="horizontal"
             android:fadingEdgeLength="@dimen/status_bar_recents_text_fading_edge_length"
             android:scrollHorizontally="true"
+            android:layout_alignParentStart="true"
             android:layout_alignStart="@id/app_thumbnail"
             android:layout_below="@id/app_thumbnail"
-            android:layout_marginTop="@dimen/status_bar_recents_text_description_padding"
+            android:paddingTop="1dp"
             android:layout_marginStart="@dimen/status_bar_recents_app_label_left_margin"
             android:singleLine="true"
             android:ellipsize="marquee"
diff --git a/packages/SystemUI/res/layout/lenovo_recent_usrguide_activity.xml b/packages/SystemUI/res/layout/lenovo_recent_usrguide_activity.xml
new file mode 100644
index 0000000..699676d
--- /dev/null
+++ b/packages/SystemUI/res/layout/lenovo_recent_usrguide_activity.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" >
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/view_pager"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:flipInterval="30"
+        android:persistentDrawingCache="animation" />
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="bottom|center_horizontal"
+        android:gravity="center"
+        android:orientation="horizontal"
+        android:layout_marginBottom="60dp">
+
+        <!--ImageButton
+            android:id="@+id/first_dot"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:scaleType="fitXY"
+            android:background="@drawable/recent_usrguide_dot" />
+
+        <ImageButton
+            android:id="@+id/second_dot"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:scaleType="fitXY"
+            android:background="@drawable/recent_usrguide_dot"
+            android:layout_marginStart="5dp" /-->
+    </LinearLayout>
+
+</FrameLayout>
diff --git a/packages/SystemUI/res/layout/lenovo_recent_usrguide_first.xml b/packages/SystemUI/res/layout/lenovo_recent_usrguide_first.xml
new file mode 100644
index 0000000..40124c9
--- /dev/null
+++ b/packages/SystemUI/res/layout/lenovo_recent_usrguide_first.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:layoutDirection="ltr"
+    android:background="@drawable/recent_portrait_usrguide_bg_0" >
+
+    <RelativeLayout
+        android:id="@+id/all"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent" >
+	<TextView
+		android:id="@+id/guide_prompt_sub_0"
+		android:layout_width="wrap_content"
+		android:layout_height="match_parent"
+		android:layout_alignParentLeft="true"
+		android:layout_marginTop="890dp"
+		android:layout_marginLeft="290dp"
+		android:text="@string/guide_prompt_info0"
+		android:textSize="30dp"
+		android:textColor="#FFFFFF"/>
+	<TextView
+		android:id="@+id/guide_prompt_sub_1"
+		android:layout_width="wrap_content"
+		android:layout_height="match_parent"
+		android:layout_marginTop="1100dp"
+		android:layout_marginLeft="450dp"
+		android:text="@string/guide_prompt_info2"
+		android:textSize="30dp"
+		android:textColor="#FFFFFF"/>
+    </RelativeLayout>
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout/lenovo_recent_usrguide_second.xml b/packages/SystemUI/res/layout/lenovo_recent_usrguide_second.xml
new file mode 100644
index 0000000..12b0b0c
--- /dev/null
+++ b/packages/SystemUI/res/layout/lenovo_recent_usrguide_second.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="@drawable/recent_portrait_usrguide_bg_1" >
+
+    <RelativeLayout
+        android:id="@+id/all"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent">
+	<TextView
+		android:id="@+id/guide_prompt_sub_2"
+		android:layout_width="wrap_content"
+		android:layout_height="match_parent"
+		android:layout_alignParentRight="true"
+		android:layout_marginTop="765dp"
+		android:layout_marginRight="170dp"
+		android:text="@string/guide_prompt_info1"
+		android:textSize="30dp"
+		android:textColor="#FFFFFF"/>
+    </RelativeLayout>
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout/lenovo_recent_usrguide_third.xml b/packages/SystemUI/res/layout/lenovo_recent_usrguide_third.xml
new file mode 100644
index 0000000..9352ac7
--- /dev/null
+++ b/packages/SystemUI/res/layout/lenovo_recent_usrguide_third.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="@drawable/recent_portrait_usrguide_bg_2" >
+
+    <RelativeLayout
+        android:id="@+id/all"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent">
+	<TextView
+		android:id="@+id/guide_prompt_sub_3"
+		android:layout_width="wrap_content"
+		android:layout_height="match_parent"
+		android:layout_alignParentRight="true"
+		android:layout_marginTop="350dp"
+		android:layout_marginRight="5dp"
+		android:text="@string/guide_prompt_info3"
+		android:textSize="30dp"
+		android:textColor="#FFFFFF"/>
+        <Button
+            android:id="@+id/recent_start_bt"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentBottom="true"
+            android:layout_centerHorizontal="true"
+            android:textSize="30dp"
+            android:text="@string/guide_close" />
+    </RelativeLayout>
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout/lenovo_status_bar_all_apps_launcher.xml b/packages/SystemUI/res/layout/lenovo_status_bar_all_apps_launcher.xml
new file mode 100644
index 0000000..2f7bd4e
--- /dev/null
+++ b/packages/SystemUI/res/layout/lenovo_status_bar_all_apps_launcher.xml
@@ -0,0 +1,54 @@
+<HorizontalScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_alignParentBottom="true"
+    android:layout_gravity="top|right"
+    android:paddingBottom="16dp"
+    android:paddingTop="20dp"
+    android:scrollbars="none" >
+
+
+	<LinearLayout
+	    android:layout_width="match_parent"
+	    android:layout_height="match_parent"
+	    android:orientation="vertical"
+        android:paddingStart="30dp"
+        android:paddingEnd="30dp"
+	    android:layoutDirection="ltr"
+	    android:layout_gravity="left" >
+		
+	    <GridView
+			android:id="@+id/apps_launcher_sub0"
+			android:layout_width="match_parent" 
+			android:layout_height="wrap_content"
+			android:layout_alignParentRight="true"
+			android:columnWidth="@dimen/recents_all_apps_columnWidth"
+			android:numColumns="auto_fit"
+			android:scrollbars="none"
+			android:stretchMode="none"
+			android:horizontalSpacing="@dimen/recents_all_apps_horizontalSpacing"
+			android:verticalSpacing="20dp" />
+
+	    <LinearLayout
+			android:layout_width="match_parent"
+			android:layout_height="16dp"
+			android:layoutDirection="ltr"
+			android:layout_gravity="left">
+	    </LinearLayout>
+
+	    <GridView
+			android:id="@+id/apps_launcher_sub1"
+			android:layout_width="match_parent" 
+			android:layout_height="wrap_content"
+			android:layout_alignParentRight="true"
+			android:columnWidth="@dimen/recents_all_apps_columnWidth"
+			android:numColumns="auto_fit"
+			android:scrollbars="none"
+			android:stretchMode="none"
+			android:horizontalSpacing="@dimen/recents_all_apps_horizontalSpacing"
+			android:verticalSpacing="20dp" />
+	</LinearLayout>
+</HorizontalScrollView>
+
+
diff --git a/packages/SystemUI/res/layout/lenovo_status_bar_recent_panel.xml b/packages/SystemUI/res/layout/lenovo_status_bar_recent_panel.xml
new file mode 100644
index 0000000..293981a
--- /dev/null
+++ b/packages/SystemUI/res/layout/lenovo_status_bar_recent_panel.xml
@@ -0,0 +1,187 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* apps/common/assets/default/default/skins/StatusBar.xml
+**
+** Copyright 2010, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:systemui="http://schemas.android.com/apk/res/com.android.systemui"
+    android:id="@+id/status_bar_recents_layout"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="#66000000">
+
+<!--1begin-->
+    <FrameLayout
+        android:id="@+id/recents_panel_indicator"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="horizontal"
+        android:paddingBottom="370dp"
+        android:paddingLeft="95dp"
+        android:paddingRight="95dp"
+        android:paddingTop="100dp"
+        android:visibility="invisible" >
+	    <include
+		android:layout_width="match_parent"
+		android:layout_height="match_parent"
+		layout="@layout/lenovo_status_bar_recent_preview"/>
+        <ImageView
+            android:id="@+id/sub_forbid_panel"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:visibility="invisible"/>
+<!--the true one end-->
+    </FrameLayout>
+<!--1end-->
+
+<!--2,3,4begin-->
+    <RelativeLayout
+        android:id="@+id/status_bar_recents_bottom"
+        android:layout_width="fill_parent"
+        android:layout_height="270dp"
+        android:layout_alignParentBottom="true"
+		android:background="@drawable/recent_bottom_bg"
+        android:orientation="vertical" >
+	<!--2begin-->
+	    <LinearLayout
+			android:id="@+id/sub_recents_bottom_0"
+			android:layout_width="fill_parent"
+			android:layout_height="44dp"
+			android:layout_alignParentBottom="true"
+			android:layout_marginBottom="226dip"
+			android:orientation="horizontal" >
+
+	<!--Relative layout for prompt begin-->
+		    <RelativeLayout
+				android:id="@+id/recents_panel_prompt"
+				android:layout_width="fill_parent"
+				android:layout_height="fill_parent" >
+
+				<TextView
+					android:id="@+id/prompt_sub_0"
+					android:layout_width="wrap_content"
+					android:layout_height="match_parent"
+					android:layout_centerInParent ="true"
+					android:layout_alignParentTop="true"
+					android:layout_marginTop="5dp"
+					android:text="@string/prompt_info"
+					android:textSize="24dp"
+					android:textColor="#FFFFFF"/>
+			    <RelativeLayout
+					android:id="@+id/recents_panel_prompt"
+					android:layout_width="56dp"
+					android:layout_height="55dp"
+					android:background="@drawable/switch_button_bg"
+					android:layout_alignParentRight="true"
+					android:layout_marginRight="20dp" >
+					<ImageButton
+					    android:id="@+id/prompt_sub_1"
+					    android:layout_width="29dp"
+					    android:layout_height="23dp"
+					    android:layout_centerInParent ="true"
+					    android:background="@drawable/recent_button_bg"
+					    android:textColor="#FFFFFF"
+					    style="?android:attr/buttonBarButtonStyle"
+					    android:visibility="visible"
+					/>	
+			    </RelativeLayout>
+		    </RelativeLayout>
+	<!--Relative layout for prompt end-->
+	    </LinearLayout>
+	<!--2end-->
+
+	<!--3begin-->
+	    <LinearLayout
+		android:id="@+id/sub_recents_bottom_1"
+		android:layout_width="fill_parent"
+		android:layout_height="1dp"
+		android:layout_alignParentBottom="true"
+		android:layout_marginBottom="225dp"
+		android:background="@drawable/recent_line_bg" >
+	    </LinearLayout>
+	<!--3end-->
+	<!--4begin-->
+
+	    <LinearLayout
+		android:id="@+id/sub_recents_bottom_2"
+		android:layout_width="fill_parent"
+		android:layout_height="225dp"
+		android:layout_alignParentBottom="true"
+		android:orientation="horizontal" >
+
+		<com.android.systemui.recent.RecentsPanelView
+		    android:id="@+id/recents_root"
+		    android:layout_width="match_parent"
+		    android:layout_height="match_parent"
+		    systemui:recentItemLayout="@layout/status_bar_recent_item" >
+
+		<!--recents apps icon begin-->
+		    <FrameLayout
+			android:id="@+id/recents_bg_protect"
+			android:layout_width="match_parent"
+			android:layout_height="match_parent"
+			android:layout_alignParentBottom="true"
+			android:clipChildren="false"
+			android:clipToPadding="false" >
+
+			<com.android.systemui.recent.RecentsHorizontalScrollView
+			    android:id="@+id/recents_container"
+			    android:layout_width="wrap_content"
+			    android:layout_height="match_parent"
+			    android:layout_gravity="right"
+			    android:fadingEdge="horizontal"
+			    android:fadingEdgeLength="@dimen/status_bar_recents_scroll_fading_edge_length"
+			    android:scrollbars="none" >
+
+			    <LinearLayout
+				android:id="@+id/recents_linear_layout"
+				android:layout_width="wrap_content"
+				android:layout_height="match_parent"
+				android:layout_gravity="left"
+				android:fitsSystemWindows="true"
+				android:layoutDirection="ltr"
+				android:orientation="horizontal" >
+			    </LinearLayout>
+			</com.android.systemui.recent.RecentsHorizontalScrollView>
+
+			<!--no apps icon begin-->
+			    <include
+				android:id="@+id/recents_no_apps"
+				android:layout_width="match_parent"
+				android:layout_height="match_parent"
+				layout="@layout/status_bar_no_recent_apps"
+				android:visibility="invisible" />
+			<!--no apps icon begin-->
+
+		    </FrameLayout>
+		<!--recents apps icon end-->
+
+		<!--all apps icon begin-->
+		    <include
+			android:id="@+id/all_apps_launcher"
+			android:layout_width="match_parent"
+			android:layout_height="match_parent"
+			layout="@layout/lenovo_status_bar_all_apps_launcher"
+			android:visibility="invisible" />
+		<!--all apps icon end-->
+
+		</com.android.systemui.recent.RecentsPanelView>
+	    </LinearLayout>
+	<!--4end-->
+</RelativeLayout>
+<!--2,3,4end-->
+</RelativeLayout>
diff --git a/packages/SystemUI/res/layout/lenovo_status_bar_recent_preview.xml b/packages/SystemUI/res/layout/lenovo_status_bar_recent_preview.xml
new file mode 100644
index 0000000..6ea4152
--- /dev/null
+++ b/packages/SystemUI/res/layout/lenovo_status_bar_recent_preview.xml
@@ -0,0 +1,92 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/* apps/common/assets/default/default/skins/StatusBar.xml
+**
+** Copyright 2010, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+	android:layout_width="match_parent"
+	android:layout_height="match_parent"
+	android:layout_weight="20"
+	android:orientation="vertical" >
+<!--the left begin-->
+	<LinearLayout
+		android:id="@+id/sub_layout_panel_1"
+		android:layout_width="match_parent"
+		android:layout_height="0dp"
+		android:layout_weight="10"
+		android:visibility="gone"
+		android:orientation="horizontal"   >
+		<ImageView
+			android:id="@+id/sub_panel_1"
+			android:layout_width="0dp"
+			android:layout_height="match_parent"
+			android:layout_weight="5"
+			android:src="@drawable/recents_previewin_ntp_bg"
+			android:visibility="gone" />
+		<View
+			android:id="@+id/spacing_0"
+			android:layout_width="0dp"
+			android:layout_height="match_parent"
+			android:layout_weight="0.1"
+			android:visibility="gone" />
+		<ImageView
+			android:id="@+id/sub_panel_4"
+			android:layout_width="0dp"
+			android:layout_height="match_parent"
+			android:layout_weight="5"
+			android:src="@drawable/recents_previewin_ntp_bg"
+			android:visibility="gone" />
+	</LinearLayout>
+<!--the left end-->
+		<View
+			android:id="@+id/spacing_1"
+			android:layout_width="match_parent"
+			android:layout_height="0dp"
+			android:layout_weight="0.1"
+			android:visibility="gone" />
+<!--the right begin-->
+	<LinearLayout
+		android:id="@+id/sub_layout_panel_2"
+		android:layout_width="match_parent"
+		android:layout_height="0dp"
+		android:layout_weight="10"
+		android:visibility="gone"
+		android:orientation="horizontal"  >
+		<ImageView
+			android:id="@+id/sub_panel_2"
+			android:layout_width="0dp"
+			android:layout_height="match_parent"
+			android:layout_weight="5"
+			android:src="@drawable/recents_previewin_ntp_bg"
+			android:visibility="gone" />
+		<View
+			android:id="@+id/spacing_2"
+			android:layout_width="0dp"
+			android:layout_height="match_parent"
+			android:layout_weight="0.1"
+			android:visibility="gone" />
+		<ImageView
+			android:id="@+id/sub_panel_3"
+			android:layout_width="0dp"
+			android:layout_height="match_parent"
+			android:layout_weight="5"
+			android:src="@drawable/recents_previewin_ntp_bg"
+			android:visibility="gone" />
+	</LinearLayout>
+<!--the right end-->
+</LinearLayout>
+<!--the true one end-->
diff --git a/packages/SystemUI/res/layout/split_point.xml b/packages/SystemUI/res/layout/split_point.xml
new file mode 100644
index 0000000..b25eae6
--- /dev/null
+++ b/packages/SystemUI/res/layout/split_point.xml
@@ -0,0 +1,153 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+
+    <RelativeLayout
+        android:id="@+id/menu_layout"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:clipChildren="false"
+        android:clipToPadding="false" >
+
+        <com.android.systemui.splitbar.view.InOutRelativeLayout
+            android:id="@+id/close_buttons_wrapper"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_centerInParent="true"
+            android:clipChildren="false"
+            android:clipToPadding="false" >
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/button_view_first"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentLeft="true"
+                android:layout_centerVertical="true"
+                android:background="@drawable/close"
+                android:visibility="gone" />
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/button_view_second"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentLeft="true"
+                android:layout_alignParentTop="true"
+                android:layout_margin="10dp"
+                android:background="@drawable/close"
+                android:visibility="gone" />
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/button_view_third"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentTop="true"
+                android:layout_centerHorizontal="true"
+                android:background="@drawable/close"
+                android:visibility="gone" />
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/button_view_forth"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentRight="true"
+                android:layout_alignParentTop="true"
+                android:layout_margin="10dp"
+                android:background="@drawable/close"
+                android:visibility="gone" />
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/button_view_Fifth"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:background="@drawable/close"
+                android:visibility="gone" />
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/button_view_sixth"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentBottom="true"
+                android:layout_alignParentRight="true"
+                android:layout_margin="10dp"
+                android:background="@drawable/close"
+                android:visibility="gone" />
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/button_view_seventh"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentBottom="true"
+                android:layout_centerHorizontal="true"
+                android:background="@drawable/close"
+                android:visibility="gone" />
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/button_view_eighth"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentBottom="true"
+                android:layout_alignParentLeft="true"
+                android:layout_margin="10dp"
+                android:background="@drawable/close"
+                android:visibility="gone" />
+        </com.android.systemui.splitbar.view.InOutRelativeLayout>
+
+        <com.android.systemui.splitbar.view.InOutRelativeLayout
+            android:id="@+id/menu_wrapper"
+            android:layout_width="150dp"
+            android:layout_height="150dp"
+            android:layout_centerInParent="true"
+            android:clipChildren="false"
+            android:clipToPadding="false" >
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/menu_add_first"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentLeft="true"
+                android:layout_centerVertical="true"
+                android:background="@drawable/add"
+                android:visibility="gone" />
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/menu_add_second"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentTop="true"
+                android:layout_centerHorizontal="true"
+                android:background="@drawable/add"
+                android:visibility="gone" />
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/menu_max_first"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:background="@drawable/max_window"
+                android:visibility="gone" />
+
+            <com.android.systemui.splitbar.view.InOutImageButton
+                android:id="@+id/menu_max_second"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentBottom="true"
+                android:layout_centerHorizontal="true"
+                android:background="@drawable/max_window"
+                android:visibility="gone" />
+        </com.android.systemui.splitbar.view.InOutRelativeLayout>
+
+        <ImageView
+            android:id="@+id/split_point"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:background="@drawable/resize" >
+        </ImageView>
+    </RelativeLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/status_bar_recent_item.xml b/packages/SystemUI/res/layout/status_bar_recent_item.xml
index 6290bb3..60a5b01 100644
--- a/packages/SystemUI/res/layout/status_bar_recent_item.xml
+++ b/packages/SystemUI/res/layout/status_bar_recent_item.xml
@@ -22,39 +22,23 @@
     xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_height="wrap_content"
     android:layout_width="match_parent"
-    android:paddingTop="@dimen/status_bar_recents_item_padding"
-    android:paddingBottom="@dimen/status_bar_recents_item_padding"
+    android:paddingStart="30dp"
+    android:paddingEnd="30dp"
     android:clipChildren="false"
     android:importantForAccessibility="no">
 
     <RelativeLayout android:id="@+id/recent_item"
-        android:layout_gravity="center_horizontal"
+        android:layout_gravity="center_vertical"
         android:layout_height="wrap_content"
         android:layout_width="wrap_content"
+        android:paddingTop="10dip"
         android:clipChildren="false">
 
-        <TextView android:id="@+id/app_label"
-            android:layout_width="@dimen/status_bar_recents_app_label_width"
-            android:layout_height="wrap_content"
-            android:textSize="@dimen/status_bar_recents_app_label_text_size"
-            android:fadingEdge="horizontal"
-            android:fadingEdgeLength="@dimen/status_bar_recents_text_fading_edge_length"
-            android:scrollHorizontally="true"
-            android:layout_alignParentStart="true"
-            android:layout_alignTop="@+id/app_icon"
-            android:paddingTop="2dp"
-            android:layout_marginStart="@dimen/status_bar_recents_app_label_left_margin"
-            android:singleLine="true"
-            android:ellipsize="marquee"
-            android:textColor="@color/status_bar_recents_app_label_color"
-            android:importantForAccessibility="no"
-            android:textAlignment="viewStart"
-        />
         <FrameLayout android:id="@+id/app_thumbnail"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_alignParentTop="true"
-            android:layout_toEndOf="@id/app_label"
+            android:layout_marginTop="@dimen/status_bar_recents_thumbnail_left_margin"
             android:layout_marginStart="@dimen/status_bar_recents_thumbnail_left_margin"
             android:background="@drawable/recents_thumbnail_bg"
             android:foreground="@drawable/recents_thumbnail_fg"
@@ -64,7 +48,7 @@
                 android:layout_height="@dimen/status_bar_recents_thumbnail_height"
             />
         </FrameLayout>
-        <View android:id="@+id/recents_callout_line"
+        <!--View android:id="@+id/recents_callout_line"
             android:layout_width="@dimen/status_bar_recents_app_label_width"
             android:layout_height="1dip"
             android:layout_alignParentStart="true"
@@ -74,21 +58,39 @@
             android:layout_marginEnd="3dip"
             android:layout_marginTop="3dip"
             android:background="@drawable/recents_callout_line"
-        />
+        /-->
 
-        <ImageView android:id="@id/app_icon"
+        <ImageView android:id="@+id/app_icon"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_toEndOf="@id/app_label"
             android:layout_marginStart="@dimen/status_bar_recents_app_icon_left_margin"
             android:layout_marginTop="@dimen/status_bar_recents_app_icon_top_margin"
+            android:layout_alignParentStart="true"
+            android:layout_alignParentTop="true"
             android:maxWidth="@dimen/status_bar_recents_app_icon_max_width"
             android:maxHeight="@dimen/status_bar_recents_app_icon_max_height"
             android:scaleType="centerInside"
             android:adjustViewBounds="true"
             android:visibility="invisible"
         />
-
+        <TextView android:id="@+id/app_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textSize="@dimen/status_bar_recents_app_label_text_size"
+            android:fadingEdge="horizontal"
+            android:fadingEdgeLength="@dimen/status_bar_recents_text_fading_edge_length"
+            android:scrollHorizontally="true"
+            android:layout_alignParentStart="true"
+			android:layout_alignStart="@id/app_thumbnail"
+			android:layout_below="@id/app_thumbnail"
+            android:paddingTop="2dp"
+            android:layout_marginStart="@dimen/status_bar_recents_app_label_left_margin"
+            android:singleLine="true"
+            android:ellipsize="marquee"
+            android:textColor="@color/status_bar_recents_app_label_color"
+            android:importantForAccessibility="no"
+            android:textAlignment="viewStart"
+        />
         <TextView android:id="@+id/app_description"
             android:layout_width="@dimen/status_bar_recents_app_label_width"
             android:layout_height="wrap_content"
@@ -98,7 +100,6 @@
             android:scrollHorizontally="true"
             android:layout_alignParentStart="true"
             android:layout_marginStart="@dimen/status_bar_recents_app_label_left_margin"
-            android:layout_below="@id/recents_callout_line"
             android:layout_marginTop="3dip"
             android:singleLine="true"
             android:ellipsize="marquee"
diff --git a/packages/SystemUI/res/values/colors.xml b/packages/SystemUI/res/values/colors.xml
index 37a7197..fd1b33b 100644
--- a/packages/SystemUI/res/values/colors.xml
+++ b/packages/SystemUI/res/values/colors.xml
@@ -50,4 +50,13 @@
 
     <color name="light_gray">#c0c0c0</color>
     <color name="light_blue">#8dc0db</color>
+    <color name="line">#80e3170d</color>
+    <color name="light_green">#80a7d48f</color>
+<!-- Begin,Lenovo-sw Tom_liming11 add 2014-01-17, add for SystemUI about MultiWindow -->
+    <color name="animationBackgroundColor">#80FFA7A7</color>
+    <color name="hoverBackgroundColor">#80F0B6B6</color>
+    <color name="filledBackgroundColor">#80F0B6B6</color>
+    <color name="defaultBackgroundColor">#50FFFFFF</color>
+<!-- End,Lenovo-sw Tom_liming11 add 2014-01-17, add for SystemUI about MultiWindow -->
+   <color name="disabledBackgroundColor">#807FFFAA</color>
 </resources>
diff --git a/packages/SystemUI/res/values/lenovo_dimens.xml b/packages/SystemUI/res/values/lenovo_dimens.xml
new file mode 100644
index 0000000..dbfe2b6
--- /dev/null
+++ b/packages/SystemUI/res/values/lenovo_dimens.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ * Copyright (c) 2006, The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+*/
+-->
+<resources>
+    <!--  -->
+    <dimen name="recents_all_apps_paddingHorSpacing">15dp</dimen>
+    <dimen name="recents_all_apps_columnWidth">75dp</dimen>
+    <dimen name="recents_all_apps_horizontalSpacing">64dp</dimen>
+</resources>
diff --git a/packages/SystemUI/res/values/lenovo_strings.xml b/packages/SystemUI/res/values/lenovo_strings.xml
index db7f605..4181fdf 100644
--- a/packages/SystemUI/res/values/lenovo_strings.xml
+++ b/packages/SystemUI/res/values/lenovo_strings.xml
@@ -77,4 +77,13 @@
     <string name="quick_settings_dolby_label">Dolby</string>
     <!-- QuickSettings: Mobile Data [CHAR LIMIT=NONE] -->
     <string name="quick_settings_mobile_data_label">Mobile Data</string>
+<!-- Begin,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow -->
+    <string name="prompt_info">Drag upwards to create multi-windows</string>
+    <string name="guide_prompt_info3">Tap to bring up function button</string>
+    <string name="guide_prompt_info2">Drag downwards to clear task</string>
+    <string name="guide_prompt_info1">Press the button to get more options to generate multi-windows</string>
+    <string name="guide_prompt_info0">Drag upwards to turn on multi-window task processing function</string>   
+    <string name="warning_prompt_info">Multi-window not supported</string>
+    <string name="guide_close"> OK </string>
+<!-- End,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow -->
 </resources>
diff --git a/packages/SystemUI/res/values/styles.xml b/packages/SystemUI/res/values/styles.xml
index 54f03bd..af702cc 100644
--- a/packages/SystemUI/res/values/styles.xml
+++ b/packages/SystemUI/res/values/styles.xml
@@ -15,9 +15,10 @@
 -->
 
 <resources xmlns:android="http://schemas.android.com/apk/res/android">
-
-    <style name="RecentsStyle" parent="@android:style/Theme.Holo.Wallpaper.NoTitleBar">
-        <item name="android:windowAnimationStyle">@style/Animation.RecentsActivity</item>
+<!--Begin,Lenovo-sw Tom_liming11 modify 2013-12-17, modify for SystemUI about MultiWindow -->
+    <style name="RecentsStyle" parent="@android:style/Theme.Translucent.NoTitleBar">
+<!--End,Lenovo-sw Tom_liming11 modify 2013-12-17, modify for SystemUI about MultiWindow -->
+        <!--item name="android:windowAnimationStyle">@style/Animation.RecentsActivity</item>-->
     </style>
 
     <!-- Animations for a non-full-screen window or activity. -->
diff --git a/packages/SystemUI/src/com/android/systemui/SwipeHelper.java b/packages/SystemUI/src/com/android/systemui/SwipeHelper.java
index d38d828..125e3b1 100644
--- a/packages/SystemUI/src/com/android/systemui/SwipeHelper.java
+++ b/packages/SystemUI/src/com/android/systemui/SwipeHelper.java
@@ -16,6 +16,8 @@
 
 package com.android.systemui;
 
+import com.android.systemui.recent.RecentsCallback;
+
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
 import android.animation.ObjectAnimator;
@@ -74,6 +76,8 @@ public class SwipeHelper implements Gefingerpoken {
     private View.OnLongClickListener mLongPressListener;
     private Runnable mWatchLongPress;
     private long mLongPressTimeout;
+	private boolean needCancel = false;
+	private RecentsCallback mRecentsCallback;
 
     public SwipeHelper(int swipeDirection, Callback callback, float densityScale,
             float pagingTouchSlop) {
@@ -346,6 +350,13 @@ public class SwipeHelper implements Gefingerpoken {
             case MotionEvent.ACTION_MOVE:
                 if (mCurrView != null) {
                     float delta = getPos(ev) - mInitialTouchPos;
+                    if (mRecentsCallback != null) {
+                        if (delta < -5) {
+                            needCancel = true;
+                            mRecentsCallback.handleLongPress(mCurrView,  null, mCurrView);
+                            break;
+                        }
+                    }
                     // don't let items that can't be dismissed be dragged more than
                     // maxScrollDistance
                     if (CONSTRAIN_SWIPE && !mCallback.canChildBeDismissed(mCurrView)) {
@@ -395,6 +406,10 @@ public class SwipeHelper implements Gefingerpoken {
         return true;
     }
 
+    public void setRecentCallback(RecentsCallback callback)  {
+        mRecentsCallback = callback;
+    }
+
     public interface Callback {
         View getChildAtPosition(MotionEvent ev);
 
diff --git a/packages/SystemUI/src/com/android/systemui/lenovo/usrguide/usrguideActivity.java b/packages/SystemUI/src/com/android/systemui/lenovo/usrguide/usrguideActivity.java
new file mode 100644
index 0000000..b8b7612
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/lenovo/usrguide/usrguideActivity.java
@@ -0,0 +1,140 @@
+package com.android.systemui.lenovo.usrguide;
+
+import com.android.systemui.R;
+import java.util.ArrayList;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.LayoutInflater;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.widget.Button;
+import android.widget.ImageButton;
+import android.support.v4.view.ViewPager;
+import android.support.v4.view.PagerAdapter;
+import com.android.systemui.recent.RecentsActivity;
+import com.android.internal.statusbar.IStatusBarService;
+import android.os.ServiceManager;
+import android.os.RemoteException;
+import android.os.UserHandle;
+import android.provider.Settings;
+import com.android.systemui.statusbar.BaseStatusBar;
+
+public class usrguideActivity extends Activity implements OnClickListener,ViewPager.OnPageChangeListener{
+    private Button bt;
+    private ViewPager mpager;
+    private ArrayList<View> pageViews;
+    //private ImageButton firstDot;
+    //private ImageButton secondDot;
+    static public final String SYSTEM_DIALOG_REASON_RECENT_APPS = "recentapps";
+    IStatusBarService mStatusBarService;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        // TODO Auto-generated method stub
+        super.onCreate(savedInstanceState);
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        setContentView(R.layout.lenovo_recent_usrguide_activity);
+        mpager = (ViewPager)findViewById(R.id.view_pager);
+        LayoutInflater inflater = getLayoutInflater();
+        pageViews = new ArrayList<View>();
+        pageViews.add(inflater.inflate(R.layout.lenovo_recent_usrguide_first, null));
+        pageViews.add(inflater.inflate(R.layout.lenovo_recent_usrguide_second, null));
+        pageViews.add(inflater.inflate(R.layout.lenovo_recent_usrguide_third, null));
+        bt = (Button) pageViews.get(2).findViewById(R.id.recent_start_bt);
+        bt.setOnClickListener(this);
+        //firstDot = (ImageButton)findViewById(R.id.first_dot);
+        //secondDot = (ImageButton)findViewById(R.id.second_dot);
+        //firstDot.setEnabled(true);
+        //secondDot.setEnabled(false);
+        mpager.setAdapter(new MyPagerAdapter());
+        mpager.setOnPageChangeListener(this);
+        getStatusBarService();
+    }
+
+    IStatusBarService getStatusBarService() {
+        if (mStatusBarService == null) {
+            mStatusBarService = IStatusBarService.Stub.asInterface(
+                    ServiceManager.getService("statusbar"));
+        }
+        return mStatusBarService;
+    }
+    
+    @Override
+    public void onClick(View v) {
+        //SharedPreferences sp = this.getSharedPreferences("first_start", 0);
+        /*boolean isFirstStart = sp.getBoolean("is_first_start", true);
+        if(isFirstStart){
+            Intent intent = new Intent("com.android.systemui.recent.RecentsActivity");
+            sendBroadcast(intent);
+        }*/
+        try {
+            IStatusBarService statusbar = getStatusBarService();
+            if (statusbar != null) {
+                Settings.Global.putInt(this.getContentResolver(),
+                        Settings.Global.SYSTEM_UI_USRGUIDE, 1);
+                statusbar.toggleRecentApps();
+            }
+        } catch (RemoteException e) {
+            //Slog.e(TAG, "RemoteException when showing recent apps", e);
+            // re-acquire status bar service next time it is needed.
+            mStatusBarService = null;
+        }
+        finish();
+    }
+
+    class MyPagerAdapter extends PagerAdapter {
+
+        @Override
+        public int getCount() {
+            return pageViews.size();
+        }
+
+        @Override
+        public Object instantiateItem(ViewGroup container, int position) {
+            ((ViewPager)container).addView(pageViews.get(position));
+            return pageViews.get(position);
+        }
+
+        @Override
+        public void destroyItem(ViewGroup container, int position, Object object) {
+            container.removeView((View) object);
+        }
+
+        @Override
+        public boolean isViewFromObject(View view, Object object) {
+            return view == object;
+        }
+
+        @Override
+        public CharSequence getPageTitle(int position) {
+            return "";
+        }
+    }
+
+    @Override
+    public void onPageScrollStateChanged(int arg0) {
+
+    }
+
+    @Override
+    public void onPageScrolled(int arg0, float arg1, int arg2) {
+
+    }
+
+    @Override
+    public void onPageSelected(int position) {
+        /*if(position == 0){
+            firstDot.setEnabled(true);
+            secondDot.setEnabled(false);
+        }*/
+        if(position == 2){
+            Settings.Global.putInt(this.getContentResolver(),
+                    Settings.Global.SYSTEM_UI_USRGUIDE, 1);
+        }
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentTasksLoader.java b/packages/SystemUI/src/com/android/systemui/recent/RecentTasksLoader.java
index c714d8b..f8486c1 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentTasksLoader.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentTasksLoader.java
@@ -370,7 +370,9 @@ public class RecentTasksLoader implements View.OnTouchListener {
         final List<ActivityManager.RecentTaskInfo> recentTasks = am.getRecentTasksForUser(
                 1, ActivityManager.RECENT_IGNORE_UNAVAILABLE, UserHandle.CURRENT.getIdentifier());
         TaskDescription item = null;
-        if (recentTasks.size() > 0) {
+        /*Begin,Lenovo sw, Tom-liming11 2014.03.20, null exception*/
+        if (recentTasks != null && recentTasks.size() > 0) {
+        /*End,Lenovo sw, Tom-liming11 2014.03.20, null exception*/
             ActivityManager.RecentTaskInfo recentInfo = recentTasks.get(0);
 
             Intent intent = new Intent(recentInfo.baseIntent);
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsActivity.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsActivity.java
index 819bb7c..2132696 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsActivity.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsActivity.java
@@ -34,7 +34,28 @@ import com.android.systemui.statusbar.StatusBarPanel;
 
 import java.util.List;
 
+/*Begin,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */
+import android.content.res.Configuration;
+import android.widget.TextView;
+import android.widget.Button;
+import android.widget.ImageButton;
+import android.util.Log;
+import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
+
+import java.lang.ref.WeakReference;
+import android.os.Handler;
+import com.android.systemui.statusbar.policy.Prefs;
+import com.android.systemui.lenovo.usrguide.usrguideActivity;
+import android.os.Message;
+import android.widget.ImageView;
+import android.widget.ImageView.ScaleType;
+import android.graphics.drawable.Drawable;
+/*End,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */
+
 public class RecentsActivity extends Activity {
+    private static final boolean DEBUG = true;
+    public static final String TAG = "RecentsActivity";
     public static final String TOGGLE_RECENTS_INTENT = "com.android.systemui.recent.action.TOGGLE_RECENTS";
     public static final String PRELOAD_INTENT = "com.android.systemui.recent.action.PRELOAD";
     public static final String CANCEL_PRELOAD_INTENT = "com.android.systemui.recent.CANCEL_PRELOAD";
@@ -49,6 +70,25 @@ public class RecentsActivity extends Activity {
     private boolean mShowing;
     private boolean mForeground;
 
+    /*Begin,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */
+    //View dummyMainView = null;
+    
+    ImageView subPanelView[] = {null,null,
+            null,null};
+    ImageView subForbidView = null;
+    View subLayoutPanelView[] = {null,null};
+    View viewSpacing[] = {null,null,null};
+    private View mRecentsPanelIndicator;
+    TextView subPromptView = null;
+    
+    private ImageButton mAllAppSwitch;
+    private View mAppLauncher;
+    private View mRecentAppList;
+    static boolean isRecentAppList = false;
+    private View mStatusBarRecentsLayout;
+    private View mStatusBarRecentsBottom;
+    /*End,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */
+    
     private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {
@@ -66,14 +106,54 @@ public class RecentsActivity extends Activity {
             }
         }
     };
+  
+    public class TouchAllAppSwitchListener implements View.OnTouchListener {        
+        private ImageButton mImgBtn;
 
+        public TouchAllAppSwitchListener(ImageButton mImgBtn0) {
+            mImgBtn = mImgBtn0;
+        }
+        
+        public boolean onTouch(View v, MotionEvent ev) {
+            final int action = ev.getAction();
+            if(mImgBtn != null){
+                switch(action){
+                case MotionEvent.ACTION_DOWN:
+                    vibrate();
+                    if(isRecentAppList)
+                    {
+                        mImgBtn.setBackgroundResource(R.drawable.btn_recent_pressed);
+                        isRecentAppList = false;
+                        mAppLauncher.setVisibility(View.VISIBLE);
+                        mRecentAppList.setVisibility(View.INVISIBLE);
+                    }else
+                    {
+                        mImgBtn.setBackgroundResource(R.drawable.btn_recent_normal);
+                        isRecentAppList = true;
+                        mAppLauncher.setVisibility(View.INVISIBLE);
+                        mRecentAppList.setVisibility(View.VISIBLE);
+                    }
+                    
+                    break;
+                case MotionEvent.ACTION_UP:
+                    break;
+                    
+                default:
+                    break;
+                }
+                return true;
+            }
+            return false;
+        }
+    }
+    
+    
     public class TouchOutsideListener implements View.OnTouchListener {
         private StatusBarPanel mPanel;
 
         public TouchOutsideListener(StatusBarPanel panel) {
             mPanel = panel;
         }
-
         public boolean onTouch(View v, MotionEvent ev) {
             final int action = ev.getAction();
             if (action == MotionEvent.ACTION_OUTSIDE
@@ -86,6 +166,48 @@ public class RecentsActivity extends Activity {
         }
     }
 
+/*Begin,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        final int action = event.getAction();
+        if ((action == MotionEvent.ACTION_DOWN
+                && isNotInPreviewArea((int) event.getX(), (int) event.getY()))) {
+            dismissAndGoBack();
+            return true;
+        }
+        return false;
+    }
+
+    public void vibrate() {
+        android.os.Vibrator vib = (android.os.Vibrator)this.getSystemService(
+                Context.VIBRATOR_SERVICE);
+        vib.vibrate(50);
+    }
+    
+    private boolean isNotInPreviewArea(int x,int y) {
+        return mStatusBarRecentsBottom != null ? pointInsides(x, y,  mStatusBarRecentsBottom) : false;
+    }
+
+    private boolean pointInsides(int x, int y, View v2) {
+        final int t = v2.getTop();
+        // System.out.println("t : " + t + " b : " + b + " x : " + x + " y : " + y);
+        return y < t;
+    }
+    
+    private boolean isInContentArea(int x,int y) {
+        return mStatusBarRecentsBottom != null ? pointInside(x, y, mStatusBarRecentsBottom) : false;
+    }
+
+    private boolean pointInside(int x, int y, View v) {
+        final int l = v.getLeft();
+        final int r = v.getRight();
+        final int t = v.getTop();
+        final int b = v.getBottom();
+        // System.out.println("t : " + t + " b : " + b + " x : " + x + " y : " + y);
+        return x >= l && x < r && y >= t && y < b;
+    }
+/*End,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */    
+    
     @Override
     public void onPause() {
         overridePendingTransition(
@@ -103,6 +225,7 @@ public class RecentsActivity extends Activity {
         mShowing = false;
         if (mRecentsPanel != null) {
             mRecentsPanel.onUiHidden();
+            mRecentsPanel.show(false);
         }
         super.onStop();
     }
@@ -122,12 +245,24 @@ public class RecentsActivity extends Activity {
 
     @Override
     public void onStart() {
+    /*Begin,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */
         // Hide wallpaper if it's not a static image
-        if (forceOpaqueBackground(this)) {
-            updateWallpaperVisibility(false);
-        } else {
-            updateWallpaperVisibility(true);
+        //if (forceOpaqueBackground(this)) {
+
+        /*if(mStatusBarRecentsBottom != null) {
+            Animation animation = AnimationUtils.loadAnimation(this, R.anim.lenovo_status_bar_recent_bottom_enter_animation);
+            animation.reset();
+            mStatusBarRecentsBottom.setAnimation(animation);
+        }*/
+
+        if(mStatusBarRecentsLayout != null) {
+            Animation animation = AnimationUtils.loadAnimation(this, R.anim.lenovo_status_bar_recent_enter_animation);
+            animation.reset();
+            mStatusBarRecentsLayout.setAnimation(animation);
         }
+
+        updateWallpaperVisibility(false);
+   /*End,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */
         mShowing = true;
         if (mRecentsPanel != null) {
             // Call and refresh the recent tasks list in case we didn't preload tasks
@@ -141,6 +276,12 @@ public class RecentsActivity extends Activity {
     @Override
     public void onResume() {
         mForeground = true;
+        /*if(mStatusBarRecentsLayout != null) {
+            mStatusBarRecentsLayout.setVisibility(View.VISIBLE);
+        }*/
+        mAppLauncher.setVisibility(View.INVISIBLE);
+        mRecentAppList.setVisibility(View.VISIBLE);
+        isRecentAppList = true;
         super.onResume();
     }
 
@@ -180,15 +321,61 @@ public class RecentsActivity extends Activity {
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        getWindow().addPrivateFlags(
-                WindowManager.LayoutParams.PRIVATE_FLAG_INHERIT_TRANSLUCENT_DECOR);
-        setContentView(R.layout.status_bar_recent_panel);
+        /*Begin,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */
+        setContentView(R.layout.lenovo_status_bar_recent_panel);
+        mStatusBarRecentsLayout = findViewById(R.id.status_bar_recents_layout);
+        mStatusBarRecentsBottom = findViewById(R.id.status_bar_recents_bottom);
+        /*End,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */        
         mRecentsPanel = (RecentsPanelView) findViewById(R.id.recents_root);
         mRecentsPanel.setOnTouchListener(new TouchOutsideListener(mRecentsPanel));
-        mRecentsPanel.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
-                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
-                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
+        //mRecentsPanel.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
+        /*Begin,Lenovo-sw liming11 add 2013-12-16, add for the feature of MultiWindow */
+        mRecentsPanelIndicator = findViewById(R.id.recents_panel_indicator);
+        //dummyMainView = findViewById(R.id.dummy_main_view);
+
+        /*Begin,Lenovo-sw liming11 add 2014-01-08, modify for MultiWindow */
+        subPanelView[0] = (ImageView)findViewById(R.id.sub_panel_1);
+        subPanelView[1] = (ImageView)findViewById(R.id.sub_panel_2);
+        subPanelView[2] = (ImageView)findViewById(R.id.sub_panel_3);
+        subPanelView[3] = (ImageView)findViewById(R.id.sub_panel_4);
+        subForbidView = (ImageView)findViewById(R.id.sub_forbid_panel);
+
+        viewSpacing[0] = (View)findViewById(R.id.spacing_0);
+        viewSpacing[1] = (View)findViewById(R.id.spacing_1);
+        viewSpacing[2] = (View)findViewById(R.id.spacing_2);
+        subLayoutPanelView[0] = findViewById(R.id.sub_layout_panel_1);
+        subLayoutPanelView[1] = findViewById(R.id.sub_layout_panel_2);
+        
+        /*End,Lenovo-sw liming11 add 2014-01-08, modify for MultiWindow */
+        subPromptView = (TextView)findViewById(R.id.prompt_sub_0);
+        //subPromptView.setText(R.id.prompt_info);
+        mAllAppSwitch = (ImageButton) findViewById(R.id.prompt_sub_1);
+        mAppLauncher = findViewById(R.id.all_apps_launcher);
+        mRecentAppList = findViewById(R.id.recents_bg_protect);
+        mAllAppSwitch.setOnTouchListener(new TouchAllAppSwitchListener(mAllAppSwitch));
+        
+        mRecentsPanel.mRecentsPanelIndicator = mRecentsPanelIndicator;
+        //mRecentsPanel.dummyMainView = dummyMainView;
+        for(int i=0; i<viewSpacing.length; i++){
+            mRecentsPanel.viewSpacing[i] = viewSpacing[i];
+        }
+        
+        for(int i=0; i<subPanelView.length; i++){
+            mRecentsPanel.subPanelView[i] = subPanelView[i];
+            mRecentsPanel.subPanelView[i].setScaleType(ScaleType.FIT_XY);
+        }
+
+        mRecentsPanel.subForbidView = subForbidView;
+        mRecentsPanel.subForbidView.setScaleType(ScaleType.FIT_XY);
 
+        for(int i=0; i<subLayoutPanelView.length; i++){
+            mRecentsPanel.subLayoutPanelView[i] = subLayoutPanelView[i];
+        }
+        mRecentsPanel.subPromptView = subPromptView;
+        /*Begin,Lenovo-sw liming11 add 2014-01-08, modify for MultiWindow */
+        //mHandler = new MyHandler(this);
+        /*End,Lenovo-sw Tom_liming11 add 2013-12-16, add for the feature of MultiWindow */
+        
         final RecentTasksLoader recentTasksLoader = RecentTasksLoader.getInstance(this);
         recentTasksLoader.setRecentsPanel(mRecentsPanel, mRecentsPanel);
         mRecentsPanel.setMinSwipeAlpha(
@@ -247,4 +434,25 @@ public class RecentsActivity extends Activity {
     boolean isActivityShowing() {
          return mShowing;
     }
+    
+    
+    /* Begin,Lenovo-sw Tom_liming11 add 2013-12-17, add the feature of usrguide for SystemUI about MultiWindow */
+    private static final int WHAT_SHOW_POP = 1;
+    private Handler mHandler;
+
+    @Override
+    public void onWindowFocusChanged(boolean hasFocus) {
+        super.onWindowFocusChanged(hasFocus);
+        if(hasFocus) {
+            checkAndShowRecentGuide();
+        }
+    }
+
+    //private usrguideActivity mPopupWindow;
+    private static final String RECENTS_USE_GUIDE_STATE = "recents_use_guide10";
+
+    private void checkAndShowRecentGuide() {
+        final boolean isShow = Prefs.read(this).getBoolean(RECENTS_USE_GUIDE_STATE, false);
+    }
+    /* End,Lenovo-sw Tom_liming11 add 2013-12-17, add the feature of usrguide for SystemUI about MultiWindow */   
 }
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
index be42bc0..1274cca 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
@@ -371,5 +371,6 @@ public class RecentsHorizontalScrollView extends HorizontalScrollView
 
     public void setCallback(RecentsCallback callback) {
         mCallback = callback;
+        mSwipeHelper.setRecentCallback(mCallback);
     }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
index ef024a4..ce9fdee 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
@@ -37,6 +37,7 @@ import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Bundle;
+import android.os.Handler;
 import android.os.RemoteException;
 import android.os.UserHandle;
 import android.provider.Settings;
@@ -65,11 +66,51 @@ import com.android.systemui.R;
 import com.android.systemui.statusbar.BaseStatusBar;
 import com.android.systemui.statusbar.StatusBarPanel;
 import com.android.systemui.statusbar.phone.PhoneStatusBar;
+import com.android.systemui.splitbar.StackBoxInfoUtils;
+import com.android.systemui.splitbar.StackBoxInfoUtils.WinDisplayMode;
 
 import java.util.ArrayList;
 
+//MultiWindow NJ lenovo liming11 add 2013-12-06 begin
+import android.content.ActivityNotFoundException;
+import android.animation.ObjectAnimator;
+import android.animation.PropertyValuesHolder;
+import android.animation.Animator.AnimatorListener;
+import android.app.Activity;
+import android.app.ActivityManager.StackBoxInfo;
+import android.content.ClipData;
+import android.content.ComponentName;
+import android.content.pm.ActivityInfo;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.util.DisplayMetrics;
+import android.view.DragEvent;
+import android.view.View.DragShadowBuilder;
+import android.view.View.OnDragListener;
+import android.view.ViewGroup.LayoutParams;
+import android.widget.AdapterView.OnItemLongClickListener;
+import android.widget.GridView;
+import android.widget.SeekBar;
+import android.widget.SeekBar.OnSeekBarChangeListener;
+import android.widget.LinearLayout;
+import java.util.List;
+import android.util.Slog;
+import android.content.pm.ComponentInfo;
+import android.view.WindowManager;
+import android.graphics.Color;
+import android.graphics.Canvas;
+import android.graphics.Rect;
+import android.view.Display;
+import android.os.Message;
+//MultiWindow NJ lenovo liming11 add 2013-12-06 end
+import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
+import android.os.AsyncTask;
+import android.graphics.drawable.LayerDrawable;
+
 public class RecentsPanelView extends FrameLayout implements OnItemClickListener, RecentsCallback,
-        StatusBarPanel, Animator.AnimatorListener {
+        StatusBarPanel, Animator.AnimatorListener, View.OnTouchListener {
     static final String TAG = "RecentsPanelView";
     static final boolean DEBUG = PhoneStatusBar.DEBUG || false;
     private PopupMenu mPopup;
@@ -93,6 +134,173 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
     private int mRecentItemLayoutId;
     private boolean mHighEndGfx;
 
+/*Begin,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */
+    View mRecentsPanelIndicator;
+    private GridView mAppsLauncherView0;
+    private GridView mAppsLauncherView1;
+    private View mResizerView;
+    private int launcherItemSize = 0;
+    private int mSeekerValue = 50;
+    private List<ResolveInfo> mAppsSub0 = null;
+    private List<ResolveInfo> mAppsSub1 = null;
+/*End,Lenovo-sw Tom_liming11 add 2013-12-17, add for SystemUI about MultiWindow */
+    private float mInitialTouchPosY;
+    private float mInitialTouchPosX;
+    private boolean inMultiWindowMode = false;
+    private View templeView = null;
+
+    //MultiWindow NJ lenovo liming11 add 2013-12-06 begin
+    private List<ResolveInfo> mApps = null;
+    private List<ResolveInfo> mAppsInWhiteList = null;
+    private int mAppPaddingSpacing;
+    private boolean isInWhiteList = false;
+
+    private int loadApps(int screenWidth,int width, int spacing) {
+        if(DEBUG) Log.v(TAG,"loadApps");
+
+        Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
+        mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);
+
+        mApps = mContext.getPackageManager().queryIntentActivities(mainIntent,PackageManager.GET_RESOLVED_FILTER);
+
+        mAppsInWhiteList = null;
+        mAppsInWhiteList = new ArrayList<ResolveInfo>();
+        /*Begin,Lenovo sw , Tom-liming11 2014-02-19 BLADEFHD-2395*/
+        for (int i =0;i < mApps.size();i++) {
+             if (appInWhiteList(mApps.get(i).activityInfo.packageName)) {
+                 if ((mApps.get(i).activityInfo.packageName.equalsIgnoreCase("com.lenovo.ideafriend"))){
+                     if(mApps.get(i).activityInfo.name.equalsIgnoreCase("com.lenovo.ideafriend.alias.MmsActivity"))
+                         mAppsInWhiteList.add(mApps.get(i));
+                 }else
+                     mAppsInWhiteList.add(mApps.get(i));
+             }
+        }
+        //del duplicate app
+        delDupApps(mAppsInWhiteList);
+        /*End,Lenovo sw, Tom-liming11 2014-02-19 BLADEFHD-2395*/
+
+        return splitApps(screenWidth,width, spacing);
+    }
+
+    /*Begin,Lenovo sw, Tom-liming11 2014-02-19 BLADEFHD-2395*/
+    private void delDupApps(List<ResolveInfo> arrayList){
+        for(int i = 0; i < arrayList.size()-1; i++){
+            for(int j = i+1; j < arrayList.size();){
+                if(arrayList.get(i).activityInfo.packageName.equalsIgnoreCase(arrayList.get(j).activityInfo.packageName))
+                    arrayList.remove(j);
+                else
+                    j++;
+                }
+            }
+    }
+    /*End,Lenovo sw, Tom-liming11 2014-02-19 BLADEFHD-2395*/
+
+    private boolean appInWhiteList(String packageName) {
+        Resources res = mContext.getResources();
+        String[] whiteList = res.getStringArray(com.android.internal.R.array.apps_white_list);
+        if (whiteList == null) {
+            return false;
+        }
+        for (int i = 0;i<whiteList.length;i++) {
+             if (packageName.equalsIgnoreCase(whiteList[i])) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /*Begin,Lenovo-sw Tom_liming11 modify the method of split apps for BLADEFHD-283 2014-02-10, */
+    private int splitApps(int screenWidth,int width, int spacing){
+        int mUseWidth = screenWidth - 2*mAppPaddingSpacing;
+        int mBase = mAppsInWhiteList.size()/2;
+        mAppsSub0 = null;
+        mAppsSub1 = null;
+        if((mAppsInWhiteList.size() * (width+spacing) - 2*spacing) >= mUseWidth*2){
+            if(0 == mAppsInWhiteList.size()%2) {
+                mAppsSub0 = mAppsInWhiteList.subList(0, mBase);
+                mAppsSub1 = mAppsInWhiteList.subList(mBase, mAppsInWhiteList.size());
+            }else{
+                mAppsSub0 = mAppsInWhiteList.subList(0, mBase+1);
+                mAppsSub1 = mAppsInWhiteList.subList(mBase+1, mAppsInWhiteList.size());
+            }
+            if(DEBUG) Log.v("Tom","2 mBase == " + mBase + " mAppsInWhiteList.size() == " + mAppsInWhiteList.size());
+            return 2;
+        }else{
+            //if(mUseWidth/(width+spacing))
+            int mFirstSize = (mUseWidth/(width+spacing)+1);
+            int mSecondSize = mAppsInWhiteList.size() - mFirstSize;
+            if(mAppsInWhiteList.size()>= mFirstSize)
+                mAppsSub0 = mAppsInWhiteList.subList(0, mFirstSize);
+            else{
+                mAppsSub0 = mAppsInWhiteList;
+                if(DEBUG) Log.v("Tom","1 mFirstSize == " + mFirstSize + " mAppsInWhiteList.size() == " + mAppsInWhiteList.size());
+            }
+            if(mSecondSize > 0){
+                mAppsSub1 = mAppsInWhiteList.subList(mFirstSize, mAppsInWhiteList.size());
+                if(DEBUG) Log.v("Tom","2 mFirstSize == " + mFirstSize + " mAppsInWhiteList.size() == " + mAppsInWhiteList.size());
+                return 2;
+            }
+            return 1;
+        }
+    }
+    /*end,Lenovo-sw Tom_liming11 modify the method of split apps for BLADEFHD-283 2014-02-10, */
+    
+    public class AppsLauncherAdapterSub0 extends BaseAdapter {
+
+        public View getView(int position, View convertView, ViewGroup parent) {
+            ImageView i = new ImageView(mContext);
+            if(mAppsSub0 != null){
+                ResolveInfo info = mAppsSub0.get(position % mAppsSub0.size());
+                i.setImageDrawable(info.activityInfo.loadIcon(mContext.getPackageManager()));
+                i.setScaleType(ImageView.ScaleType.FIT_CENTER);
+                final int w = launcherItemSize;
+                i.setLayoutParams(new GridView.LayoutParams(w, w));
+                return i;
+            }
+            return null;
+        }
+
+        public final int getCount() {
+            return mAppsSub0 != null ? mAppsSub0.size():0;
+        }
+
+        public final Object getItem(int position) {
+            return mAppsSub0 != null ? mAppsSub0.get(position % mAppsSub0.size()):null;
+        }
+ 
+        public final long getItemId(int position) {
+            return position;
+        }
+    }
+    
+    public class AppsLauncherAdapterSub1 extends BaseAdapter {
+
+        public View getView(int position, View convertView, ViewGroup parent) {
+            ImageView i = new ImageView(mContext);
+            if(mAppsSub1 != null){
+                ResolveInfo info = mAppsSub1.get(position % mAppsSub1.size());
+                i.setImageDrawable(info.activityInfo.loadIcon(mContext.getPackageManager()));
+                i.setScaleType(ImageView.ScaleType.FIT_CENTER);
+                final int w = launcherItemSize;
+                i.setLayoutParams(new GridView.LayoutParams(w, w));
+                return i;
+            }
+            return null;
+        }
+
+        public final int getCount() {
+            return mAppsSub1 != null ? mAppsSub1.size():0;
+        }
+
+        public final Object getItem(int position) {
+            return mAppsSub1 != null ? mAppsSub1.get(position % mAppsSub1.size()):null;
+        }
+ 
+        public final long getItemId(int position) {
+            return position;
+        }
+    }
+//MultiWindow NJ lenovo liming11 add 2013-12-06 end
     public static interface RecentsScrollView {
         public int numItemsInOneScreenful();
         public void setAdapter(TaskDescriptionAdapter adapter);
@@ -120,7 +328,7 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         ImageView iconView;
         TextView labelView;
         TextView descriptionView;
-        View calloutLine;
+        //View calloutLine;
         TaskDescription taskDescription;
         boolean loadedThumbnailAndIcon;
     }
@@ -156,7 +364,7 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
             holder.iconView = (ImageView) convertView.findViewById(R.id.app_icon);
             holder.iconView.setImageDrawable(mRecentTasksLoader.getDefaultIcon());
             holder.labelView = (TextView) convertView.findViewById(R.id.app_label);
-            holder.calloutLine = convertView.findViewById(R.id.recents_callout_line);
+            //holder.calloutLine = convertView.findViewById(R.id.recents_callout_line);
             holder.descriptionView = (TextView) convertView.findViewById(R.id.app_description);
 
             convertView.setTag(holder);
@@ -191,11 +399,6 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
                         oldHolder.labelView.setAlpha(1f);
                         oldHolder.labelView.setTranslationX(0f);
                         oldHolder.labelView.setTranslationY(0f);
-                        if (oldHolder.calloutLine != null) {
-                            oldHolder.calloutLine.setAlpha(1f);
-                            oldHolder.calloutLine.setTranslationX(0f);
-                            oldHolder.calloutLine.setTranslationY(0f);
-                        }
                     }
                     mItemToAnimateInWhenWindowAnimationIsFinished = holder;
                     int translation = -getResources().getDimensionPixelSize(
@@ -209,8 +412,8 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
                         holder.iconView.setTranslationX(translation);
                         holder.labelView.setAlpha(0f);
                         holder.labelView.setTranslationX(translation);
-                        holder.calloutLine.setAlpha(0f);
-                        holder.calloutLine.setTranslationX(translation);
+                        /*holder.calloutLine.setAlpha(0f);
+                        holder.calloutLine.setTranslationX(translation);*/
                     } else {
                         holder.iconView.setAlpha(0f);
                         holder.iconView.setTranslationY(translation);
@@ -245,12 +448,7 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
             holder.labelView.setAlpha(1f);
             holder.labelView.setTranslationX(0f);
             holder.labelView.setTranslationY(0f);
-            if (holder.calloutLine != null) {
-                holder.calloutLine.setAlpha(1f);
-                holder.calloutLine.setTranslationX(0f);
-                holder.calloutLine.setTranslationY(0f);
-                holder.calloutLine.animate().cancel();
-            }
+
             holder.taskDescription = null;
             holder.loadedThumbnailAndIcon = false;
         }
@@ -311,6 +509,7 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         if (show) {
             mWaitingToShow = true;
             refreshRecentTasksList(recentTaskDescriptions, firstScreenful);
+            refreshAllAppsList();
             showIfReady();
         } else {
             showImpl(false);
@@ -346,6 +545,28 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
             mRecentsNoApps.setAlpha(1f);
             mRecentsNoApps.setVisibility(noApps ? View.VISIBLE : View.INVISIBLE);
 
+//MultiWindow NJ lenovo liming11 modify 2014-01-13 begin
+            mRecentsPanelIndicator.setVisibility(View.VISIBLE);
+            //showPanelIndicator();
+            for(int i = 0; i<subPanelView.length; i++)
+                subPanelView[i].setOnTouchListener(new TouchPanelViewSwitchListener(i));
+            //mResizerView.setVisibility(View.INVISIBLE);
+            try {
+                List<StackBoxInfo> sbis = ActivityManagerNative.getDefault()
+                        .getStackBoxes();
+                if (sbis.size() > 1) {
+                    for (StackBoxInfo stackBoxInfo : sbis) {
+                        if ((stackBoxInfo.stackId != 0)
+                                && (stackBoxInfo.children != null)) {
+                            //mResizerView.setVisibility(View.INVISIBLE);
+                        }
+                    }
+                }
+            } catch (RemoteException e) {
+                e.printStackTrace();
+            }
+//MultiWindow NJ lenovo liming11 add 2013-12-06 end
+
             onAnimationEnd(null);
             setFocusable(true);
             setFocusableInTouchMode(true);
@@ -357,6 +578,8 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
             if (mPopup != null) {
                 mPopup.dismiss();
             }
+            gonePanelPreview();
+        ((RecentsActivity) mContext).moveTaskToBack(true);
         }
     }
 
@@ -432,6 +655,13 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         final Resources res = mContext.getResources();
         mThumbnailWidth = Math.round(res.getDimension(R.dimen.status_bar_recents_thumbnail_width));
         mFitThumbnailToXY = res.getBoolean(R.bool.config_recents_thumbnail_image_fits_to_xy);
+        defaultBackground = getResources().getDrawable(R.drawable.panel_background_drawable);
+        animationBackground = getResources().getDrawable(R.drawable.panel_animation_background_drawable);
+        hoverBackground = getResources().getDrawable(R.drawable.panel_hover_background_drawable);
+        filledBackground = getResources().getDrawable(R.drawable.panel_filled_background_drawable);
+        mAppPaddingSpacing = (int)getContext().getResources().getDimension(R.dimen.recents_all_apps_paddingHorSpacing);
+        //defaultEdgingBackground = getResources().getDrawable(R.drawable.panel_edging_drawable);
+        //highlightEdgingBackground = getResources().getDrawable(R.drawable.panel_highlight_edging_drawable);
     }
 
     @Override
@@ -449,9 +679,16 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         mRecentsContainer.setAdapter(mListAdapter);
         mRecentsContainer.setCallback(this);
 
+        mHandler = new MyHandler();
         mRecentsScrim = findViewById(R.id.recents_bg_protect);
         mRecentsNoApps = findViewById(R.id.recents_no_apps);
 
+        mAppsLauncherView0 = (GridView)findViewById(R.id.apps_launcher_sub0);
+        mAppsLauncherView1 = (GridView)findViewById(R.id.apps_launcher_sub1);
+
+        if (!mWaitingForWindowAnimation) {
+            animateInIconOfFirstTask();
+        }
         if (mRecentsScrim != null) {
             mHighEndGfx = ActivityManager.isHighEndGfx();
             if (!mHighEndGfx) {
@@ -463,6 +700,231 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         }
     }
 
+    private void refreshAllAppsList(){
+        DisplayMetrics dm = new DisplayMetrics();
+        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
+        wm.getDefaultDisplay().getMetrics(dm);
+        int mScreenWidth = dm.widthPixels;
+        int mScreenHeight = dm.heightPixels;
+        float m = getContext().getResources().getDisplayMetrics().density;
+        final int mScreenDip = (int)(mScreenWidth / m + 0.5f);
+        //Log.v("DisplayMetrics","screenWidth == " + screenWidth + "screenDip == " + screenDip + " screenHeight == " + screenHeight);
+        launcherItemSize = mAppsLauncherView0.getRequestedColumnWidth();
+        final int mHorizontalSpacing = mAppsLauncherView0.getRequestedHorizontalSpacing();
+        final int mlauncherAppWidth = (int)(launcherItemSize / m + 0.5f) ;
+        final int mlauncherAppHorSpacing = (int)(mHorizontalSpacing / m + 0.5f) ;
+
+        /*OnItemClickListener launcherIconClick = new OnItemClickListener(){
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                ResolveInfo info = (ResolveInfo)parent.getAdapter().getItem(position);
+                launchResolverByInfo(info,false);
+            }
+        };*/
+    
+        final OnItemLongClickListener launcherIconLongClick = new OnItemLongClickListener(){
+            @Override
+            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
+                showPanelIndicator();
+                showPanelDraging();
+                ResolveInfo info = (ResolveInfo)parent.getAdapter().getItem(position);
+                prepareDragDrop(-1,launcherIconDrageListener);
+                ClipData data = ClipData.newPlainText("dot", "Dot : " + view.toString());
+                view.startDrag(data,new DragShadowBuilder(view), (Object)info, 0);
+                return true;
+            }
+        };
+
+        /*Begin,Lenovo-sw Tom_liming11 modify 2014-02-27 for Asynchronous loading all app icons*/
+        (new AsyncTask<Void, Void, Integer>() {
+            @Override protected Integer doInBackground(Void... params) {
+                //SystemClock.sleep(250);
+                int mLine = loadApps(mScreenDip,mlauncherAppWidth,mlauncherAppHorSpacing);
+                return mLine;
+            }
+
+            @Override
+            protected void onPostExecute(Integer result) {
+                super.onPostExecute(result);
+                if(2 == result){
+                    mAppsLauncherView0.setAdapter(new AppsLauncherAdapterSub0());
+                    mAppsLauncherView1.setAdapter(new AppsLauncherAdapterSub1());
+                }else {
+                    mAppsLauncherView0.setAdapter(new AppsLauncherAdapterSub0());
+                }
+                final Configuration config = getResources().getConfiguration();
+                int size = mAppsLauncherView0.getAdapter().getCount();
+                int allWidth = (int) (launcherItemSize*size + mHorizontalSpacing*(size-1)+ 10);//10 makes the list more fancy
+                int itemWidth = (int) (launcherItemSize);
+
+                final LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(
+                        allWidth, LinearLayout.LayoutParams.WRAP_CONTENT);
+                mAppsLauncherView0.setLayoutParams(param);
+                mAppsLauncherView0.setNumColumns(size);
+                mAppsLauncherView0.setOnTouchListener(new TouchAllappsIconListener());
+                mAppsLauncherView0.setOnItemLongClickListener(launcherIconLongClick);
+                if(2 == result){
+                    int size1 = mAppsLauncherView1.getAdapter().getCount();
+                    mAppsLauncherView1.setLayoutParams(param);
+                    mAppsLauncherView1.setNumColumns(size1);
+                    mAppsLauncherView1.setOnTouchListener(new TouchAllappsIconListener());
+                    mAppsLauncherView1.setOnItemLongClickListener(launcherIconLongClick);
+                }
+            }
+        }).execute();
+        /*End,Lenovo-sw Tom_liming11 modify 2014-02-27 for Asynchronous loading all app icons*/
+    }
+
+    private class MyHandler extends Handler {
+        @Override
+        public void handleMessage(Message msg) {
+                switch (msg.what) {
+                case SHOW_RED_WARNING:
+                    subPromptView.setText(R.string.warning_prompt_info);
+                    subPromptView.setTextColor(Color.RED);
+                    subForbidView.setVisibility(View.VISIBLE);
+                    subForbidView.setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_forbid_bg));
+                break;
+                case SHOW_WHITE_WARNING:
+                    subPromptView.setTextColor(Color.WHITE);
+                    mHandler.sendEmptyMessageDelayed(SHOW_RED_WARNING, 200);
+                break;
+                case SHOW_WHITE_NORMAL:
+                    subPromptView.setText(R.string.prompt_info);
+                    subPromptView.setTextColor(Color.WHITE);
+                    subForbidView.setVisibility(View.GONE);
+                    break;
+                }
+            }
+        }
+
+    @Override
+    public boolean onTouch(View arg0, MotionEvent arg1) {
+            float xPosition = arg1.getX();
+            float yPosition = arg1.getY();
+            int positon = ((GridView)arg0).pointToPosition((int)xPosition, (int)yPosition);
+            if (positon == -1) {
+                return false;
+            }
+            ResolveInfo info = (ResolveInfo)((GridView)arg0).getAdapter().getItem(positon);
+            View child = getChildAtPosition(arg1,((GridView)arg0));
+            if (templeView != null && templeView != child) {
+                templeView.setBackgroundColor(Color.TRANSPARENT);
+            }
+            final int action = arg1.getAction();
+            switch (action) {
+            case MotionEvent.ACTION_DOWN:
+
+                templeView = child;
+                mInitialTouchPosY = arg1.getY();
+                mInitialTouchPosX = arg1.getX();
+
+            case MotionEvent.ACTION_MOVE:
+            //float space = moveSpace(arg1,mInitialTouchPosX,mInitialTouchPos);
+
+            if (arg1.getY() + 5 < mInitialTouchPosY) {
+                inMultiWindowMode = true;
+                if(DEBUG) Log.v("Tom","view == " + arg0);
+                showPanelIndicator();
+                showPanelDraging();
+                prepareDragDrop(-1,launcherIconDrageListener);
+                ClipData data = ClipData.newPlainText("dot", "Dot : " + child.toString());
+                arg0.startDrag(data,new DragShadowBuilder(child), (Object)info, 0);
+            } else {
+                inMultiWindowMode = false;
+            }
+            break;
+            
+            case MotionEvent.ACTION_CANCEL:
+                if(DEBUG) Log.v("Tom","ACTION_CANCEL ");
+                break;
+            
+            case MotionEvent.ACTION_UP:
+                if(DEBUG) Log.v("Tom","ACTION_UP");
+            child.setBackgroundColor(Color.YELLOW);
+            if (!inMultiWindowMode) {
+                launchResolverByInfo(info,false);
+            } else {
+                inMultiWindowMode = false;
+            }
+            break;
+    }
+      return true;
+    }
+
+    public class TouchAllappsIconListener implements View.OnTouchListener {
+        public boolean onTouch(View arg0, MotionEvent arg1) {
+            float xPosition = arg1.getX();
+            float yPosition = arg1.getY();
+            int positon = ((GridView)arg0).pointToPosition((int)xPosition, (int)yPosition);
+            if (positon == -1) {
+                return false;
+            }
+            ResolveInfo info = (ResolveInfo)((GridView)arg0).getAdapter().getItem(positon);
+            View child = getChildAtPosition(arg1,((GridView)arg0));
+            if (templeView != null && templeView != child) {
+                templeView.setBackgroundColor(Color.TRANSPARENT);
+            }
+
+            final int action = arg1.getAction();
+            switch (action) {
+                case MotionEvent.ACTION_DOWN:
+                    templeView = child;
+                    mInitialTouchPosY = arg1.getY();
+                    mInitialTouchPosX = arg1.getX();
+
+                case MotionEvent.ACTION_MOVE:
+                //float space = moveSpace(arg1,mInitialTouchPosX,mInitialTouchPos);
+
+                if (arg1.getY() + 5 < mInitialTouchPosY) {
+                    inMultiWindowMode = true;
+                    if(DEBUG) Log.v("Tom","view == " + arg0);
+                    showPanelIndicator();
+                    showPanelDraging();
+                    prepareDragDrop(-1,launcherIconDrageListener);
+                    ClipData data = ClipData.newPlainText("dot", "Dot : " + child.toString());
+                    arg0.startDrag(data,new DragShadowBuilder(child), (Object)info, 0);
+                } else {
+                    inMultiWindowMode = false;
+                }
+                break;
+
+                case MotionEvent.ACTION_CANCEL:
+                    if(DEBUG) Log.v("Tom","ACTION_CANCEL ");
+                    break;
+
+                case MotionEvent.ACTION_UP:
+                    if(DEBUG) Log.v("Tom","ACTION_UP");
+                child.setBackgroundColor(Color.YELLOW);
+                if (!inMultiWindowMode) {
+                    launchResolverByInfo(info,false);
+                } else {
+                    inMultiWindowMode = false;
+                }
+                break;
+            }
+            return false;
+        }
+    }
+    public View getChildAtPosition(MotionEvent ev,GridView view) {
+        final float x = ev.getX() + getScrollX();
+        final float y = ev.getY() + getScrollY();
+        for (int i = 0; i < view.getChildCount(); i++) {
+            View item = view.getChildAt(i);
+            if (x >= item.getLeft() && x < item.getRight()
+                && y >= item.getTop() && y < item.getBottom()) {
+                return item;
+            }
+        }
+        return null;
+    }
+
+    public void removeBackground() {
+        if (templeView != null) {
+            templeView.setBackgroundColor(Color.TRANSPARENT);
+        }
+    }
+
     public void setMinSwipeAlpha(float minAlpha) {
         mRecentsContainer.setMinSwipeAlpha(minAlpha);
     }
@@ -562,7 +1024,7 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
             final TimeInterpolator cubic = new DecelerateInterpolator(1.5f);
             FirstFrameAnimatorHelper.initializeDrawListener(holder.iconView);
             for (View v :
-                new View[] { holder.iconView, holder.labelView, holder.calloutLine }) {
+                new View[] { holder.iconView, holder.labelView}) {
                 if (v != null) {
                     ViewPropertyAnimator vpa = v.animate().translationX(0).translationY(0)
                             .alpha(1f).setStartDelay(startDelay)
@@ -657,7 +1119,11 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
     }
 
     public void handleOnClick(View view) {
-        ViewHolder holder = (ViewHolder) view.getTag();
+        handleOnClick(view, false);
+    }
+
+    private void handleOnClick(View view, boolean isSimulateClick) {
+        ViewHolder holder = (ViewHolder)view.getTag();
         TaskDescription ad = holder.taskDescription;
         final Context context = view.getContext();
         final ActivityManager am = (ActivityManager)
@@ -686,6 +1152,16 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
             // This is an active task; it should just go to the foreground.
             am.moveTaskToFront(ad.taskId, ActivityManager.MOVE_TASK_WITH_HOME,
                     opts);
+            try {
+                if (!isSimulateClick) {
+                    ActivityManagerNative.getDefault().setFocusedTask(ad.taskId);
+                } else {
+                    int stackId = ActivityManagerNative.getDefault().getFocusedStack2();
+                    ActivityManagerNative.getDefault().setFocusedStack(stackId);
+                }
+            } catch (RemoteException e) {
+                Slog.e(TAG, "", e);
+            }
         } else {
             Intent intent = ad.intent;
             intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY
@@ -759,63 +1235,955 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         }
     }
 
-    public void handleLongPress(
-            final View selectedView, final View anchorView, final View thumbnailView) {
-        if(mPopup != null) {
-            mPopup.dismiss();
+//MultiWindow NJ lenovo liming11 add 2013-12-06 begin
+
+    /*Begin,Lenovo-sw liming11 add 2014-01-08, modify for MultiWindow */
+    TextView subPromptView = null;
+    View viewSpacing[] = {null,null,null};
+    ImageView subPanelView[] = {null,null,
+            null,null};
+    ImageView subForbidView = null;
+    View subLayoutPanelView[] = {null,null};
+    //Drawable defaultEdgingBackground = null;
+    //Drawable highlightEdgingBackground = null;
+    /*End,Lenovo-sw liming11 add 2014-01-08, modify for MultiWindow */
+    GridView appView = null;
+    Drawable animationBackground = null;
+    Drawable defaultBackground = null;
+    Drawable hoverBackground = null;
+    Drawable filledBackground = null;
+    int DURATION = 500;
+    int PANEL_EMPTY=0;
+    int PANEL_OCCUPIED=1;
+    private Handler mHandler;
+    private static final int SHOW_RED_WARNING = 1;
+    private static final int SHOW_WHITE_WARNING = 2;
+    private static final int SHOW_WHITE_NORMAL = 3;
+
+    public void RotationInAnimation(final View targetView,boolean useAnimationBackground,boolean recoverBackgroundAfterAnmiation){
+        targetView.setPivotX(targetView.getLeft()+targetView.getWidth()/2);
+        targetView.setPivotY(targetView.getBottom());
+        PropertyValuesHolder pvhR = PropertyValuesHolder.ofFloat("Rotation",-90, 0f);
+        PropertyValuesHolder pvhAlpha = PropertyValuesHolder.ofFloat("alpha",0, 1);
+        ObjectAnimator whxyBouncer = ObjectAnimator.ofPropertyValuesHolder(targetView,pvhR, pvhAlpha).setDuration(DURATION);
+        if (useAnimationBackground){
+            targetView.setBackgroundColor(getResources().getColor(R.color.animationBackgroundColor));
+            if (recoverBackgroundAfterAnmiation){ 
+                whxyBouncer.addListener(resetBackground(targetView));
+            }            
         }
-        thumbnailView.setSelected(true);
-        final PopupMenu popup =
-            new PopupMenu(mContext, anchorView == null ? selectedView : anchorView);
-        mPopup = popup;
-        popup.getMenuInflater().inflate(R.menu.recent_popup_menu, popup.getMenu());
-        popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
-            public boolean onMenuItemClick(MenuItem item) {
-                if (item.getItemId() == R.id.recent_remove_item) {
-                    ((ViewGroup) mRecentsContainer).removeViewInLayout(selectedView);
-                } else if (item.getItemId() == R.id.recent_inspect_item) {
-                    ViewHolder viewHolder = (ViewHolder) selectedView.getTag();
-                    if (viewHolder != null) {
-                        final TaskDescription ad = viewHolder.taskDescription;
-                        startApplicationDetailsActivity(ad.packageName);
-                        show(false);
+        whxyBouncer.start();
+    }
+    
+    public void DropInAnimation(final View targetView,boolean useAnimationBackground,boolean recoverBackgroundAfterAnmiation){
+        PropertyValuesHolder pvhSX = PropertyValuesHolder.ofFloat("ScaleX", 0f,1f);
+        PropertyValuesHolder pvhSY = PropertyValuesHolder.ofFloat("ScaleY", 0f,1f);
+        PropertyValuesHolder pvhAlpha = PropertyValuesHolder.ofFloat("alpha",0, 1);
+        ObjectAnimator whxyBouncer = ObjectAnimator.ofPropertyValuesHolder(targetView,pvhSX,pvhSY, pvhAlpha).setDuration(DURATION);
+        if (useAnimationBackground){
+            //targetView.setBackground(animationBackground);
+            if (recoverBackgroundAfterAnmiation){ 
+                whxyBouncer.addListener(resetBackground(targetView));
+            }            
+        }
+        whxyBouncer.start();
+    }
+
+
+    public void FlyOutAnimation(final View targetView,boolean positiveDirection, boolean useAnimationBackground,boolean recoverBackgroundAfterAnmiation){
+        PropertyValuesHolder pvhAlpha = PropertyValuesHolder.ofFloat("alpha", 1, 0,0);
+        PropertyValuesHolder pvTY;
+        if (positiveDirection){
+            pvTY = PropertyValuesHolder.ofFloat("y", targetView.getY(),targetView.getY()-targetView.getHeight(), targetView.getY());
+        }else{
+            pvTY = PropertyValuesHolder.ofFloat("y", targetView.getY(),targetView.getY()+ targetView.getHeight(), targetView.getY());
+        }
+        ObjectAnimator whxyBouncer = ObjectAnimator.ofPropertyValuesHolder(targetView, pvTY,pvhAlpha).setDuration(DURATION);
+        //whxyBouncer.setInterpolator(new android.view.animation.AccelerateDecelerateInterpolator());
+        if (useAnimationBackground){
+            targetView.setBackground(animationBackground);
+            if (recoverBackgroundAfterAnmiation){ 
+                whxyBouncer.addListener(resetBackground(targetView));
+            }
+        }        
+        whxyBouncer.start();
+    }
+    
+    public void FlyInAnimation(final View targetView,boolean positiveDirection, boolean useAnimationBackground,boolean recoverBackgroundAfterAnmiation){
+
+        PropertyValuesHolder pvhAlpha = PropertyValuesHolder.ofFloat("alpha", 0,1);
+        PropertyValuesHolder pvTY;
+        if (positiveDirection){
+            pvTY = PropertyValuesHolder.ofFloat("y", targetView.getY()-targetView.getHeight(), targetView.getY());
+        }else{
+            pvTY = PropertyValuesHolder.ofFloat("y", targetView.getY()+ targetView.getHeight(), targetView.getY());
+        }
+        ObjectAnimator whxyBouncer = ObjectAnimator.ofPropertyValuesHolder(targetView, pvTY,pvhAlpha).setDuration(DURATION);
+        //whxyBouncer.setInterpolator(new android.view.animation.AccelerateDecelerateInterpolator());
+        if (useAnimationBackground){
+            targetView.setBackground(animationBackground);
+            if (recoverBackgroundAfterAnmiation){ 
+                whxyBouncer.addListener(resetBackground(targetView));
+            }            
+        }           
+        whxyBouncer.start();
+    }
+
+    private AnimatorListener resetBackground(final View targetView) {
+        AnimatorListener ret = new AnimatorListener() {
+            
+            @Override
+            public void onAnimationCancel(Animator animation) {
+                targetView.setBackgroundColor(getResources().getColor(R.color.defaultBackgroundColor));
+                targetView.setAlpha(1);
+                targetView.invalidate();
+            }
+
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                targetView.setBackgroundColor(getResources().getColor(R.color.defaultBackgroundColor));
+                targetView.setAlpha(1);
+                targetView.invalidate();
+            }
+
+            @Override
+            public void onAnimationRepeat(Animator animation) {
+            // TODO Auto-generated method stub
+            }
+
+            @Override
+            public void onAnimationStart(Animator animation) {
+                // TODO Auto-generated method stub
+            }
+        };
+        
+        return ret;
+    }
+
+    /*Lenovo sw start, xieqiong2 2014.1.22 BLADEFHD-283*/
+    private int getTaskIdByDragEvent(DragEvent event) {
+        ResolveInfo info = (ResolveInfo)event.getLocalState();
+        StackBoxInfoUtils sbiu = new StackBoxInfoUtils();
+        ComponentName cn = new ComponentName(
+                           info.activityInfo.applicationInfo.packageName,
+                           info.activityInfo.name);
+        int taskId = sbiu.getTaskIdFromNameInfo(cn.flattenToString());
+        return taskId;
+    }
+
+    private int findStackIdByDragApp(DragEvent event) {
+        StackBoxInfoUtils sbiu = new StackBoxInfoUtils();
+        int taskId = getTaskIdByDragEvent(event);
+        int stackId = sbiu.getStackIdByTaskId(taskId);
+        return stackId;
+    }
+    /*Lenovo sw end, xieqiong2 2014.1.22 BLADEFHD-283*/
+
+    void upDateViewByTag(View view,boolean enter, boolean disable){
+        //it is need 
+        int i = 0;
+        for(int j = 0; j < subPanelView.length; j++){
+            if(view == subPanelView[j]){
+                i = j;
+                break;
+            }
+            
+        }
+        
+        StackBoxInfoUtils sbiu = new StackBoxInfoUtils();
+        Configuration config = getResources().getConfiguration();
+        boolean portMode = (config.orientation == Configuration.ORIENTATION_PORTRAIT);
+        
+        if(portMode){
+            
+            if (enter){
+                if(sbiu.getDisplayMode(portMode) == StackBoxInfoUtils.WinDisplayMode.ThreePrTpSplit){
+                    
+                    if(3 == i && null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, true)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_blue_bg)));
+                            }
+                        }
+                    }else if(2 == i){
+                        subPanelView[i].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_blue_bg));
+                    }else if(null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){    
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, true)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_blue_bg)));
+                            }
+                        }
+                    }
+                }else{
+                    if(i>=sbiu.getTotalWindows()){
+                        subPanelView[i].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_blue_bg));
+                    }else if(null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, true)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_blue_bg)));    
+                            }
+                        }
+                    }
+                }
+            }else {
+                if(sbiu.getDisplayMode(portMode) == StackBoxInfoUtils.WinDisplayMode.ThreePrTpSplit){
+                    if(2 == i){
+                        subPanelView[i].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+                    }else if(3 == i && null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, true)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_tp_bg)));    
+                            }
+                        }
+                    }else if(null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){    
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, true)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_tp_bg)));
+                            }
+                        }
+                    }
+                }else{
+                    if(i>=sbiu.getTotalWindows()){
+                        subPanelView[i].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+                    }else if(null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){    
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, true)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_tp_bg)));
+                            }
+                        }
+                    }
+                }
+            }
+        }else{
+            if (enter){
+                if(sbiu.getDisplayMode(portMode) == StackBoxInfoUtils.WinDisplayMode.ThreeLdLtSplit){
+                    if(2 == i){
+                        subPanelView[i].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_blue_bg));
+                    }else if(3 == i && null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, false)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_blue_bg)));    
+                            }
+                        }
+                    }else if(null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){    
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, false)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_blue_bg)));
+                            }
+                        }
+                    }
+                }else{
+                    if(i>=sbiu.getTotalWindows()){
+                        subPanelView[i].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_blue_bg));
+                    }else if(null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){    
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, false)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_blue_bg)));    
+                            }
+                        }
+                    }
+                }
+            }else {
+                if(sbiu.getDisplayMode(portMode) == StackBoxInfoUtils.WinDisplayMode.ThreeLdLtSplit){
+                    if(2 == i){
+                        subPanelView[i].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+                    }else if(3 == i && null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, false)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_tp_bg)));    
+                            }
+                        }
+                    }else if(null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){    
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, false)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_tp_bg)));
+                            }
+                        }
+                    }
+                }else{
+                    if(i>=sbiu.getTotalWindows()){
+                        subPanelView[i].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+                    }else if(null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() > 0){    
+                        for(int j = 0; j<mRecentTaskDescriptions.size(); j++){
+                            if(mRecentTaskDescriptions.get(j).taskId == sbiu.getTopTaskIdByIndex(i+1, false)){
+                                Drawable drawable = mRecentTaskDescriptions.get(j).getThumbnail();
+                                subPanelView[i].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_tp_bg)));
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    private void launchResolverByInfo(ResolveInfo info,boolean isDrag) {
+//dingej1 2014,2,27 begin. BLADEFHD-2311 dismissAndGoBack will call show(false) before startActivity. Cause AMS wrong
+        //RecentsPanelView.this.dismissAndGoBack(); //if we put this line to bottom of this function, new started app will be dismissed....
+//dingej1 end.
+        Intent intent = new Intent(Intent.ACTION_MAIN);
+        intent.addCategory(Intent.CATEGORY_LAUNCHER);
+        intent.setComponent(new ComponentName(
+                info.activityInfo.applicationInfo.packageName,
+                info.activityInfo.name));
+        int flags = Intent.FLAG_ACTIVITY_NEW_TASK
+                | Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY;
+        if (isDrag)
+            flags |= Intent.FLAG_ACTIVITY_MULTIWINDOW;
+        intent.setFlags(flags);
+
+        if (DEBUG)
+            Log.v(TAG, "Starting activity " + intent);
+        try {
+            RecentsPanelView.this.mContext.startActivityAsUser(intent, null,
+                    new UserHandle(UserHandle.USER_CURRENT));
+
+        } catch (SecurityException e) {
+            Log.e(TAG, "Recents does not have the permission to launch "
+                    + intent, e);
+        } catch (ActivityNotFoundException e) {
+            Log.e(TAG, "Error launching activity " + intent, e);
+        }
+//dingej1 2014,2,27 begin. BLADEFHD-2311 
+        RecentsPanelView.this.show(false);
+//dingej1 end.
+    }
+
+    /*Lenovo sw end, xieqiong2 add 2014.1.24 BLADEFHD-283*/
+    boolean isLeftSplitTrend(int index) {
+        StackBoxInfoUtils sbiu = new StackBoxInfoUtils();
+        return ((index == 4)&&(sbiu.getTotalWindows() == 2));
+    }
+    /*Lenovo sw end, xieqiong2 add 2014.1.24 BLADEFHD-283*/
+
+
+    OnDragListener launcherIconDrageListener = new OnDragListener(){
+        @Override
+        public boolean onDrag(View v, DragEvent event) {
+            switch (event.getAction()) {
+            case DragEvent.ACTION_DRAG_STARTED: {
+                // claim to accept any dragged content
+                if(DEBUG) Log.i(TAG, "Drag started.");
+                //changing
+                
+            } break;
+
+            case DragEvent.ACTION_DRAG_ENDED: {
+                if(DEBUG) Log.i(TAG, "Drag ended.");
+                //when up,it's need show the start preview
+                //showPanelIndicator();
+                gonePanelPreview();
+                //mRecentsPanelIndicator.setVisibility(View.INVISIBLE);
+            } break;
+
+            case DragEvent.ACTION_DRAG_LOCATION: {
+                // we returned true to DRAG_STARTED, so return true here
+
+            } break;
+
+            case DragEvent.ACTION_DROP: {
+                if(DEBUG) Log.i(TAG, "Got a drop! dot=" + this + " event=" + event);
+                DropInAnimation(v,true,false);
+                View targetView = v;
+                    /*Lenovo sw end, xieqiong2 modify 2014.1.22 BLADEFHD-283*/
+                    int taskId = getTaskIdByDragEvent(event);
+                    int stackId = findStackIdByDragApp(event);
+                StackBoxInfoUtils sbiu = new StackBoxInfoUtils();
+
+                    int index;
+                    //get the index from the targetview
+                    for (index = 0; index < subPanelView.length; index++) {
+                       if (targetView == subPanelView[index]) {
+                            break;
+                       }
+                    }
+                    index = index + 1; //window UI index starts from 1!
+
+                    Configuration config = getResources().getConfiguration();
+                    boolean portMode = (config.orientation == Configuration.ORIENTATION_PORTRAIT);
+                    WinDisplayMode mode = sbiu.getDisplayMode(portMode);
+
+                    int targetStackId = sbiu.getStackIdByIndex(index, portMode);
+                    if(stackId >= 0) {
+                      try {
+                        if(sbiu.getStackTaskSizeByStackId(stackId) == 1) {
+                            ActivityManagerNative.getDefault().moveTaskToFront(taskId, ActivityManager.MOVE_TASK_WITH_HOME, null);
+                            ActivityManagerNative.getDefault().setFocusedTask(taskId);
+                            //TODO, flash the window.
+                        } else {
+                            if(stackId == targetStackId) {
+                                ActivityManagerNative.getDefault().moveTaskToFront(taskId, ActivityManager.MOVE_TASK_WITH_HOME, null);
+                                ActivityManagerNative.getDefault().setFocusedTask(taskId);
+                            } else {
+                                if(targetStackId < 0) {
+                                   targetStackId = sbiu.addNewWindow(isLeftSplitTrend(index));
+                                }
+                                //sbiu.setTargetWindow(index, portMode);
+                                dismissAndGoBack();
+                                ActivityManagerNative.getDefault().moveTaskToStack(taskId, targetStackId, true);
+                                ActivityManagerNative.getDefault().setFocusedTask(taskId);
+                            }
+                        }
+                      } catch (RemoteException e) {
+                        e.printStackTrace();
+                      }
                     } else {
-                        throw new IllegalStateException("Oops, no tag on view " + selectedView);
+                        if(targetStackId >= 0) {
+                            sbiu.setTargetWindow(index, portMode);
+                        } else {
+                            sbiu.addNewWindow(isLeftSplitTrend(index));
+                        }
+                        launchResolverByInfo((ResolveInfo)event.getLocalState(),true);
                     }
+                    upDateViewByTag(v,false,false);
+                    /*Lenovo sw end, xieqiong2 modify 2014.1.22 BLADEFHD-283*/
+            } break;
+
+            case DragEvent.ACTION_DRAG_ENTERED: {
+                    /*Lenovo sw start, xieqiong2 modify 2014.1.22 BLADEFHD-283*/
+                        int stackId = findStackIdByDragApp(event);
+                        StackBoxInfoUtils sbiu = new StackBoxInfoUtils();
+                        boolean disableView = ((stackId >= 0) && (sbiu.getStackTaskSizeByStackId(stackId) == 1))?true:false;
+                        if(DEBUG) Log.v("ACTION_DRAG_ENTERED  ","v == " + v);
+                        upDateViewByTag(v,true,false);
+                        
+                        //upDateViewByTag(v,true, disableView);
+                    /*Lenovo sw end, xieqiong2 modify 2014.1.22 BLADEFHD-283*/
+            } break;
+
+            case DragEvent.ACTION_DRAG_EXITED: {
+                upDateViewByTag(v,false,false);
+            } break;
+
+            default:
+                break;
+            }
+            return true;
+        }
+    };
+
+
+    OnDragListener recentAppDrageListener = new OnDragListener(){
+        @Override
+        public boolean onDrag(View v, DragEvent event) {
+            switch (event.getAction()) {
+            case DragEvent.ACTION_DRAG_STARTED: {
+                // claim to accept any dragged content
+                if(DEBUG) Log.i(TAG, "Drag started.");
+                if(!isInWhiteList){
+                    mHandler.sendEmptyMessage(SHOW_RED_WARNING);
+                    //subForbidView.setVisibility(View.VISIBLE);
+                    //subForbidView.setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_forbid_bg));
+                }
+
+            } break;
+
+            case DragEvent.ACTION_DRAG_ENDED: {
+                if(DEBUG) Log.i(TAG, "Drag ended.");
+                if(!isInWhiteList){
+                    isInWhiteList = true;
+                    mHandler.sendEmptyMessage(SHOW_WHITE_NORMAL);
+                    //subForbidView.setVisibility(View.GONE);
+                }
+                gonePanelPreview();
+                //showPanelIndicator();
+                //mRecentsPanelIndicator.setVisibility(View.INVISIBLE);
+            } break;
+
+            case DragEvent.ACTION_DRAG_LOCATION: {
+                // we returned true to DRAG_STARTED, so return true here
+
+            } break;
+
+            case DragEvent.ACTION_DROP: {
+                //Log.i(TAG, "Got a drop! dot=" + this + " event=" + event);
+                if(!isInWhiteList)
+                    break;
+                DropInAnimation(v,true,false);
+                    /*Lenovo sw start, xieqiong2 add 2014.1.23 BLADEFHD-283*/
+                View targetView = v;
+                View orgView = (View)event.getLocalState();
+                ViewHolder holder = (ViewHolder) orgView.getTag();
+                TaskDescription ad = holder.taskDescription;
+                StackBoxInfoUtils sbiu = new StackBoxInfoUtils();
+                int taskId = ad.taskId;
+                int stackId = sbiu.getStackIdByTaskId(taskId);
+
+                final ActivityManager am = (ActivityManager)RecentsPanelView.this.mContext.getSystemService(Context.ACTIVITY_SERVICE);
+                Bitmap bm = null;
+                boolean usingDrawingCache = true;
+
+                /*if (holder.thumbnailViewDrawable instanceof BitmapDrawable) {
+                    bm = ((BitmapDrawable) holder.thumbnailViewDrawable).getBitmap();
+                    if (bm.getWidth() == holder.thumbnailViewImage.getWidth() &&
+                    bm.getHeight() == holder.thumbnailViewImage.getHeight()) {
+                       usingDrawingCache = false;
+                    }
+                }*/
+                if (usingDrawingCache) {
+                   holder.thumbnailViewImage.setDrawingCacheEnabled(true);
+                   bm = holder.thumbnailViewImage.getDrawingCache();
+                }
+                Bundle opts = (bm == null) ?
+                   null :
+                   ActivityOptions.makeThumbnailScaleUpAnimation(
+                   holder.thumbnailViewImage, bm, 0, 0, null).toBundle();
+
+
+                //calculate the index start,to get the index from the targetview
+                int index;
+                for (index = 0; index < subPanelView.length; index++) {
+                   if (targetView == subPanelView[index]) {
+                        break;
+                   }
+                }
+                index = index + 1; //window UI index starts from 1!
+
+                Configuration config = getResources().getConfiguration();
+                boolean portMode = (config.orientation == Configuration.ORIENTATION_PORTRAIT);
+                WinDisplayMode mode = sbiu.getDisplayMode(portMode);
+
+                int targetStackId = sbiu.getStackIdByIndex(index, portMode);
+                if(stackId >= 0) {
+                  try {
+                    if(sbiu.getStackTaskSizeByStackId(stackId) == 1) {
+                        ActivityManagerNative.getDefault().moveTaskToFront(taskId, ActivityManager.MOVE_TASK_WITH_HOME, opts);
+                        ActivityManagerNative.getDefault().setFocusedTask(taskId);
+                        //TODO, flash the window.
+                    } else {
+                        if(stackId == targetStackId) {
+                            ActivityManagerNative.getDefault().moveTaskToFront(taskId, ActivityManager.MOVE_TASK_WITH_HOME, opts);
+                            ActivityManagerNative.getDefault().setFocusedTask(taskId);
+                        } else {
+                            if(targetStackId < 0) {
+                               targetStackId = sbiu.addNewWindow(isLeftSplitTrend(index));
+                            }
+                            //sbiu.setTargetWindow(index, portMode);
+                            dismissAndGoBack();
+                            ActivityManagerNative.getDefault().moveTaskToStack(taskId, targetStackId, true);
+                            ActivityManagerNative.getDefault().setFocusedTask(taskId);
+                        }
+                    }
+                  } catch (RemoteException e) {
+                    e.printStackTrace();
+                  }
                 } else {
-                    return false;
+                   if(targetStackId >= 0) {
+                        sbiu.setTargetWindow(index, portMode);
+                   } else {
+                        sbiu.addNewWindow(isLeftSplitTrend(index));
+                   }
+                   Intent intent = ad.intent;
+                   intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY
+                                   | Intent.FLAG_ACTIVITY_TASK_ON_HOME
+                                   | Intent.FLAG_ACTIVITY_MULTIWINDOW
+                                   | Intent.FLAG_ACTIVITY_NEW_TASK);
+                   if (DEBUG) Log.v(TAG, "Starting activity " + intent);
+                   try {
+                     RecentsPanelView.this.mContext.startActivityAsUser(intent, opts,
+                         new UserHandle(UserHandle.USER_CURRENT));
+                   } catch (SecurityException e) {
+                      Log.e(TAG, "Recents does not have the permission to launch " + intent, e);
+                   } catch (ActivityNotFoundException e) {
+                      Log.e(TAG, "Error launching activity " + intent, e);
+                   }
                 }
-                return true;
+                upDateViewByTag(v,false,false);
+                /*Lenovo sw end, xieqiong2 modify 2014.1.22 BLADEFHD-283*/
+
+              if (usingDrawingCache) {
+                   holder.thumbnailViewImage.setDrawingCacheEnabled(false);
+              }
+              //handleStartInStack(orgView,newStackId);
             }
-        });
-        popup.setOnDismissListener(new PopupMenu.OnDismissListener() {
-            public void onDismiss(PopupMenu menu) {
-                thumbnailView.setSelected(false);
-                mPopup = null;
+            break;
+
+            case DragEvent.ACTION_DRAG_ENTERED: {
+                if(!isInWhiteList)
+                    break;
+                  /*Lenovo sw start, xieqiong2 modify 2014.1.23 BLADEFHD-283*/
+                  View orgView = (View)event.getLocalState();
+                  ViewHolder holder = (ViewHolder) orgView.getTag();
+                  TaskDescription ad = holder.taskDescription;
+                  StackBoxInfoUtils sbiu = new StackBoxInfoUtils();
+                  int stackId = sbiu.getStackIdByTaskId(ad.taskId);
+
+                  boolean disableView = ((stackId >= 0) && (sbiu.getStackTaskSizeByStackId(stackId) == 1))?true:false;
+                  upDateViewByTag(v,true,disableView);
+                  /*Lenovo sw end, xieqiong2 modify 2014.1.23 BLADEFHD-283*/
+            } break;
+
+            case DragEvent.ACTION_DRAG_EXITED: {
+                if(isInWhiteList)
+                    upDateViewByTag(v,false, false);
+            } break;
+
+            default:
+                break;
             }
-        });
-        popup.show();
+            return true;
+        }
+    };
+    
+    private Bitmap createBitmap( Bitmap src, Bitmap watermark )
+    {
+        String tag = "createBitmap";
+        Log.d( tag, "create a new bitmap" );
+        if( src == null )
+        {
+            return null;
+        }
+ 
+        int w = src.getWidth();
+        int h = src.getHeight();
+        int ww = watermark.getWidth();
+        int wh = watermark.getHeight();
+        //create the new blank bitmap
+        Bitmap newb = Bitmap.createBitmap( w, h, Bitmap.Config.ARGB_8888 );//创建一个新的和SRC长度宽度一样的位图
+        Canvas cv = new Canvas( newb );
+        //draw src into
+        cv.drawBitmap( src, 0, 0, null );//在 0，0坐标开始画入src
+        //draw watermark into
+        cv.drawBitmap( watermark, w - ww + 5, h - wh + 5, null );//在src的右下角画入水印
+        //save all clip
+        cv.save( Canvas.ALL_SAVE_FLAG );//保存
+        //store
+        cv.restore();//存储
+        return newb;
     }
 
-    @Override
-    protected void dispatchDraw(Canvas canvas) {
-        super.dispatchDraw(canvas);
+    /*private Drawable bitmapToDrawable(Bitmap bitmap){
+        Drawable drawable = new BitmapDrawable(mContext.getResources(),bitmap);
+        return drawable;
+    }*/
+    private Drawable drawableStacked(Drawable aboveDrawable,Drawable belowDrable){
+        //Resources r = getResources();
+        Drawable[] layers = new Drawable[2];
+        layers[0] = aboveDrawable;//r.getDrawable(R.drawable.recent_previewin_bg.9);
+        layers[1] = belowDrable;//r.getDrawable(R.drawable.tt);
+        LayerDrawable layerDrawable = new LayerDrawable(layers);
+        return layerDrawable;
+    }
+    
+    
+    public void showPanelDraging(){
+        
+        StackBoxInfoUtils sbiu = new StackBoxInfoUtils();
+        if (DEBUG) Log.v(TAG,"sbiu.getTotalWindows() == " + sbiu.getTotalWindows());
+        int m_winCount = sbiu.getTotalWindows();
+        int m_previewCount = subPanelView.length;
+        //initialization begin
+
+        switch(m_winCount){
+        case 1:
+            viewSpacing[1].setVisibility(View.VISIBLE);
+            subLayoutPanelView[1].setVisibility(View.VISIBLE);
+            subPanelView[1].setVisibility(View.VISIBLE);
+            subPanelView[1].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+            break;
+        case 2:
+            //subLayoutPanelView[1].setVisibility(View.VISIBLE);
+            viewSpacing[0].setVisibility(View.VISIBLE);
+            viewSpacing[1].setVisibility(View.VISIBLE);
+            viewSpacing[2].setVisibility(View.VISIBLE);
+            
+            subPanelView[2].setVisibility(View.VISIBLE);
+            subPanelView[2].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+            subPanelView[3].setVisibility(View.VISIBLE);
+            subPanelView[3].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+            break;
+        case 3:    
+            
+            Configuration config = getResources().getConfiguration();
+            boolean portMode = (config.orientation == Configuration.ORIENTATION_PORTRAIT);
+            if(portMode){
+                if(sbiu.getDisplayMode(portMode) == StackBoxInfoUtils.WinDisplayMode.ThreePrTpSplit){
+                    viewSpacing[2].setVisibility(View.VISIBLE);
+                    subPanelView[2].setVisibility(View.VISIBLE);
+                    subPanelView[2].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+                }else{
+                    viewSpacing[0].setVisibility(View.VISIBLE);
+                    subPanelView[3].setVisibility(View.VISIBLE);
+                    subPanelView[3].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+                }
+            }else{
+                if(sbiu.getDisplayMode(portMode) == StackBoxInfoUtils.WinDisplayMode.ThreeLdLtSplit){
+                    viewSpacing[2].setVisibility(View.VISIBLE);
+                    subPanelView[2].setVisibility(View.VISIBLE);
+                    subPanelView[2].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+                }else{
+                    viewSpacing[0].setVisibility(View.VISIBLE);
+                    subPanelView[3].setVisibility(View.VISIBLE);
+                    subPanelView[3].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+                }
+            }
+
+            break;
+        case 4:
+            break;
+        default:
+            break;
+        }
+    }
 
-        int paddingLeft = mPaddingLeft;
-        final boolean offsetRequired = isPaddingOffsetRequired();
-        if (offsetRequired) {
-            paddingLeft += getLeftPaddingOffset();
+    public void gonePanelPreview(){
+        /*if(mRecentsPanelIndicator != null) {
+            Animation animation = AnimationUtils.loadAnimation(mContext, R.anim.lenovo_status_bar_recents_preview_exit);
+            animation.reset();
+            mRecentsPanelIndicator.setAnimation(animation);
+        }*/
+        for(int i = 0; i< subLayoutPanelView.length; i++){
+            subLayoutPanelView[i].setVisibility(View.GONE);
         }
+        for(int i = 0; i< viewSpacing.length; i++){
+            viewSpacing[i].setVisibility(View.GONE);
+        }
+        for(int i = 0; i< subPanelView.length; i++){
+            subPanelView[i].setVisibility(View.GONE);
+        }
+    }
 
-        int left = mScrollX + paddingLeft;
-        int right = left + mRight - mLeft - mPaddingRight - paddingLeft;
-        int top = mScrollY + getFadeTop(offsetRequired);
-        int bottom = top + getFadeHeight(offsetRequired);
+    public void showPanelIndicator(){
+        
+        StackBoxInfoUtils sbiu = new StackBoxInfoUtils();
+        if (DEBUG) Log.v("showPanelIndicatior","sbiu.getTotalWindows() == " + sbiu.getTotalWindows());
+        int m_winCount = sbiu.getTotalWindows();
+        int m_previewCount = subPanelView.length;
+        //initialization begin
 
-        if (offsetRequired) {
-            right += getRightPaddingOffset();
-            bottom += getBottomPaddingOffset();
+        for(int i = 0; i< subLayoutPanelView.length; i++){
+            subLayoutPanelView[i].setVisibility(View.GONE);
+        }
+        for(int i = 0; i< viewSpacing.length; i++){
+            viewSpacing[i].setVisibility(View.GONE);
+        }
+        //initialization end
+        
+        for(int i = m_winCount; i< m_previewCount; i++){    
+            subPanelView[i].setVisibility(View.GONE);
+        }
+        
+        subLayoutPanelView[0].setVisibility(View.VISIBLE);
+        subPanelView[0].setVisibility(View.VISIBLE);
+        if(m_winCount == 0){
+            subPanelView[0].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+        }else if(m_winCount == 2){
+            subLayoutPanelView[1].setVisibility(View.VISIBLE);
+            viewSpacing[1].setVisibility(View.VISIBLE);
+
+            subPanelView[1].setVisibility(View.VISIBLE);
+            //subPanelView[1].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+        }else if(m_winCount == 3){
+            subLayoutPanelView[1].setVisibility(View.VISIBLE);
+            viewSpacing[1].setVisibility(View.VISIBLE);
+            subPanelView[1].setVisibility(View.VISIBLE);
+            //subPanelView[1].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+            Configuration config = getResources().getConfiguration();
+            boolean portMode = (config.orientation == Configuration.ORIENTATION_PORTRAIT);
+            if(sbiu.getDisplayMode(portMode) == StackBoxInfoUtils.WinDisplayMode.ThreeLdLtSplit || 
+                    sbiu.getDisplayMode(portMode) == StackBoxInfoUtils.WinDisplayMode.ThreePrTpSplit){
+                subPanelView[3].setVisibility(View.VISIBLE);
+                //subPanelView[3].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+            }else{
+                subPanelView[2].setVisibility(View.VISIBLE);
+                //subPanelView[2].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+            }
+            
+        }else if(m_winCount == 4){
+            subLayoutPanelView[1].setVisibility(View.VISIBLE);
+            viewSpacing[1].setVisibility(View.VISIBLE);
+            viewSpacing[0].setVisibility(View.VISIBLE);
+            viewSpacing[2].setVisibility(View.VISIBLE);
+            subPanelView[1].setVisibility(View.VISIBLE);
+            //subPanelView[1].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+            subPanelView[2].setVisibility(View.VISIBLE);
+            //subPanelView[2].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+            subPanelView[3].setVisibility(View.VISIBLE);
+            //subPanelView[3].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+        }
+        
+        if(null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() != 0){    
+            int j = sbiu.getTotalWindows();
+            Configuration config = getResources().getConfiguration();
+            boolean portMode = (config.orientation == Configuration.ORIENTATION_PORTRAIT);
+            if(portMode){
+                for(int k=1; k<=j; k++){
+                    for(int i = 0; i<mRecentTaskDescriptions.size(); i++){
+                        if(mRecentTaskDescriptions.get(i).taskId == sbiu.getTopTaskIdByIndex(k, true)){
+                            Drawable drawable = mRecentTaskDescriptions.get(i).getThumbnail();
+                            subPanelView[k-1].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_tp_bg)));    
+                        }
+                    }
+                }
+            }else{
+                for(int k=1; k<=j; k++){
+                    for(int i = 0; i<mRecentTaskDescriptions.size(); i++){
+                        if(mRecentTaskDescriptions.get(i).taskId == sbiu.getTopTaskIdByIndex(k, false)){
+                            Drawable drawable = mRecentTaskDescriptions.get(i).getThumbnail();
+                            subPanelView[k-1].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_tp_bg)));    
+                        }
+                    }
+                }
+            }
+        }
+        
+        
+        if(3 == sbiu.getTotalWindows()){
+            Configuration config = getResources().getConfiguration();
+            boolean portMode = (config.orientation == Configuration.ORIENTATION_PORTRAIT);
+            if(portMode){
+                if(sbiu.getDisplayMode(portMode) == StackBoxInfoUtils.WinDisplayMode.ThreePrTpSplit){
+                    viewSpacing[0].setVisibility(View.VISIBLE);
+                    if(null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() != 0){
+                        for(int i = 0; i<mRecentTaskDescriptions.size(); i++){
+                            if(mRecentTaskDescriptions.get(i).taskId == sbiu.getTopTaskIdByIndex(4, true)){
+                                Drawable drawable = mRecentTaskDescriptions.get(i).getThumbnail();
+                                subPanelView[3].setVisibility(View.VISIBLE);
+                                subPanelView[3].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_tp_bg)));    
+                                subPanelView[2].setVisibility(View.GONE);
+                            }
+                        }
+                    }
+                    //subPanelView[2].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+                    if(DEBUG) Log.v("Tom","StackBoxInfoUtils.WinDisplayMode.ThreePrTpSplit");
+                }else{
+                    viewSpacing[2].setVisibility(View.VISIBLE);
+                }
+            }else{
+                if(sbiu.getDisplayMode(portMode) == StackBoxInfoUtils.WinDisplayMode.ThreeLdLtSplit){
+                    // show subpanelview[3] background
+                    viewSpacing[0].setVisibility(View.VISIBLE);
+                    if(null != mRecentTaskDescriptions && mRecentTaskDescriptions.size() != 0){
+                    for(int i = 0; i<mRecentTaskDescriptions.size(); i++){
+                        if(DEBUG) Log.v("Tom","mRecentTaskDescriptions.get(i).taskId == " + mRecentTaskDescriptions.get(i).taskId);
+                        if(DEBUG) Log.v("Tom","sbiu.getTopTaskIdByIndex(4, false) == " + sbiu.getTopTaskIdByIndex(4, false));
+
+                            if(mRecentTaskDescriptions.get(i).taskId == sbiu.getTopTaskIdByIndex(4, false)){
+                                Drawable drawable = mRecentTaskDescriptions.get(i).getThumbnail();
+                                subPanelView[3].setVisibility(View.VISIBLE);
+                                subPanelView[3].setImageDrawable(drawableStacked(drawable,getResources().getDrawable(R.drawable.recents_previewin_tp_bg)));
+                                subPanelView[2].setVisibility(View.GONE);
+                            }
+                        }
+                    }
+                    //subPanelView[2].setImageDrawable(getResources().getDrawable(R.drawable.recents_previewin_ntp_bg));
+                    if(DEBUG) Log.v("Tom","StackBoxInfoUtils.WinDisplayMode.ThreeLdLtSplit");
+                }else{
+                    viewSpacing[2].setVisibility(View.VISIBLE);
+                }
+            }
         }
-        mRecentsContainer.drawFadedEdges(canvas, left, right, top, bottom);
+        //changWinBackDrawable(sbiu.getTotalWindows());
+    }
+
+    public class TouchPanelViewSwitchListener implements View.OnTouchListener {
+        //private ImageButton mImgBtn;
+        private int j = -1;
+        private boolean isInside = false;
+        private int[] mTempPoint = new int[2];
+        
+        public TouchPanelViewSwitchListener(int  i) {
+            j = i;
+        }
+
+        private boolean pointInside(float x, float y, View v) {
+            v.getLocationOnScreen(mTempPoint);
+            return x >= mTempPoint[0] && x < (mTempPoint[0] + v.getWidth()) && y >= mTempPoint[1] && y < (mTempPoint[1]+v.getHeight());
+        }
+
+        public boolean onTouch(View v, MotionEvent ev) {
+
+            final int action = ev.getAction();
+            switch(action){
+            case MotionEvent.ACTION_DOWN:
+                upDateViewByTag(v,true,false);
+                isInside = true;
+                break;
+
+            case MotionEvent.ACTION_MOVE:
+                if(!pointInside(ev.getRawX(),ev.getRawY(),v)){
+                    upDateViewByTag(v,false,false);
+                    isInside = false;
+                }
+                break;
+            case MotionEvent.ACTION_UP:
+                if(DEBUG) Log.v("Tom","Action_up" + " isInside == " + isInside);
+                upDateViewByTag(v,false,false);
+                if(isInside){
+                    StackBoxInfoUtils sbiu = new StackBoxInfoUtils();
+                    //enter multiwindow and setfocus
+                    if(j < sbiu.getTotalWindows()){
+                        try {
+                            ActivityManagerNative.getDefault().showMultiWindow();
+                            if (DEBUG) Slog.d(TAG, "no need to show multi window, just toggle recent");
+                        } catch (RemoteException e) {
+                            Slog.w(TAG, "unexpected exception when showing multi window", e);
+                        }
+                    }else
+                        dismissAndGoBack();
+                    //here,we will modify 
+                }
+                break;
+
+            default:
+                break;
+            }
+            return true;
+        }
+    }
+
+    public void prepareDragDrop(int taskId,OnDragListener myDrageListener){
+        for(int i = 0; i< subPanelView.length; i++){
+            subPanelView[i].setTag(PANEL_EMPTY);
+            subPanelView[i].setOnDragListener(myDrageListener);
+        }
+        if(mRecentsPanelIndicator != null) {
+            mRecentsPanelIndicator.setVisibility(View.VISIBLE);
+            Animation animation = AnimationUtils.loadAnimation(mContext, R.anim.lenovo_status_bar_recents_preview_enter);
+            animation.reset();
+            mRecentsPanelIndicator.setAnimation(animation);
+        }
+    }
+
+    static boolean bSwitch=false;
+//MultiWindow NJ lenovo liming11 add 2013-12-06 end
+
+    public void handleLongPress(
+            final View selectedView, final View anchorView, final View thumbnailView) {
+        if(mPopup != null) {
+            mPopup.dismiss();
+        }
+        //thumbnailView.setSelected(true);
+        ViewHolder holder = (ViewHolder) selectedView.getTag();
+        TaskDescription ad = holder.taskDescription;
+
+        /*Begin,Lenovo-sw Tom_liming11 add 2014-02-12, change preview and modify the prompt when drag recent task*/
+        if(ad != null){
+            if(!appInWhiteList(ad.packageName)){
+                if (DEBUG) Log.v(TAG, "enter ad.packageName == " + ad.packageName);
+                isInWhiteList = false;
+                showPanelIndicator();
+            }else{
+                if (DEBUG) Log.v(TAG, "enter ad.packageName == " + ad.packageName);
+                isInWhiteList = true;
+                showPanelIndicator();
+                showPanelDraging();
+            }
+        }
+
+        /*End,Lenovo-sw Tom_liming11 add 2014-02-12,  change preview and modify the prompt when drag recent task*/
+        prepareDragDrop(ad.taskId,recentAppDrageListener);
+        ClipData data = ClipData.newPlainText("dot", "Dot : " + thumbnailView.toString());
+        thumbnailView.startDrag(data,new DragShadowBuilder(thumbnailView), (Object)selectedView, 0);
     }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
index 6dddc39..4fa48cb 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
@@ -58,7 +58,7 @@ public class RecentsVerticalScrollView extends ScrollView
         super(context, attrs, 0);
         float densityScale = getResources().getDisplayMetrics().density;
         float pagingTouchSlop = ViewConfiguration.get(mContext).getScaledPagingTouchSlop();
-        mSwipeHelper = new SwipeHelper(SwipeHelper.X, this, densityScale, pagingTouchSlop);
+        mSwipeHelper = new SwipeHelper(SwipeHelper.Y, this, densityScale, pagingTouchSlop);
 
         mFadedEdgeDrawHelper = FadedEdgeDrawHelper.create(context, attrs, this, true);
         mRecycledViews = new HashSet<View>();
@@ -157,7 +157,7 @@ public class RecentsVerticalScrollView extends ScrollView
             final View appTitle = view.findViewById(R.id.app_label);
             appTitle.setContentDescription(" ");
             appTitle.setOnTouchListener(noOpListener);
-            final View calloutLine = view.findViewById(R.id.recents_callout_line);
+            final View calloutLine = null;//view.findViewById(R.id.recents_callout_line);
             if (calloutLine != null) {
                 calloutLine.setOnTouchListener(noOpListener);
             }
@@ -381,5 +381,6 @@ public class RecentsVerticalScrollView extends ScrollView
 
     public void setCallback(RecentsCallback callback) {
         mCallback = callback;
+        mSwipeHelper.setRecentCallback(mCallback);
     }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/recent/VerticalSeekBar.java b/packages/SystemUI/src/com/android/systemui/recent/VerticalSeekBar.java
new file mode 100644
index 0000000..7ea6df9
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/recent/VerticalSeekBar.java
@@ -0,0 +1,105 @@
+package com.android.systemui.recent;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.widget.SeekBar;
+
+public class VerticalSeekBar extends SeekBar {
+
+	protected OnSeekBarChangeListener changeListener;
+	protected int x, y, z, w;
+
+	public VerticalSeekBar(Context context) {
+		super(context);
+	}
+
+	public VerticalSeekBar(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+	}
+
+	public VerticalSeekBar(Context context, AttributeSet attrs) {
+		super(context, attrs);
+	}
+
+	@Override
+	protected synchronized void onSizeChanged(int w, int h, int oldw, int oldh) {
+		super.onSizeChanged(h, w, oldh, oldw);
+
+		this.x = w;
+		this.y = h;
+		this.z = oldw;
+		this.w = oldh;
+	}
+
+	@Override
+	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+		super.onMeasure(heightMeasureSpec, widthMeasureSpec);
+		setMeasuredDimension(getMeasuredHeight(), getMeasuredWidth());
+	}
+
+	@Override
+	protected void onDraw(Canvas c) {
+		c.rotate(270);
+		c.translate(-getHeight(), 0);
+
+		super.onDraw(c);
+	}
+
+	@Override
+	public boolean onTouchEvent(MotionEvent event) {
+		if (!isEnabled()) {
+			return false;
+		}
+
+		switch (event.getAction()) {
+		case MotionEvent.ACTION_DOWN:
+			setSelected(true);
+			setPressed(true);
+			if (changeListener != null)
+				changeListener.onStartTrackingTouch(this);
+			break;
+		case MotionEvent.ACTION_UP:
+			setSelected(false);
+			setPressed(false);
+			if (changeListener != null)
+				changeListener.onStopTrackingTouch(this);
+			break;
+		case MotionEvent.ACTION_MOVE:
+			int progress = getMax()
+					- (int) (getMax() * event.getY() / getHeight());
+			if (progress < 0){
+				progress =0;
+			}else if (progress>getMax()){
+				progress=getMax();
+			}
+			setProgress(progress);
+			onSizeChanged(getWidth(), getHeight(), 0, 0);
+			if (changeListener != null)
+				changeListener.onProgressChanged(this, getMax()-progress, true);
+			break;
+
+		case MotionEvent.ACTION_CANCEL:
+			break;
+		}
+		return true;
+	}
+
+	@Override
+	public synchronized void setOnSeekBarChangeListener(
+			OnSeekBarChangeListener listener) {
+		changeListener = listener;
+	}
+
+	@Override
+	public synchronized void setProgress(int progress) {
+
+		super.setProgress(progress);
+		Log.e("eric", "point="+progress);
+		onSizeChanged(x, y, z, w);
+		if (changeListener != null)
+			changeListener.onProgressChanged(this, progress, false);
+	}
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/splitbar/FloatingWindowService.java b/packages/SystemUI/src/com/android/systemui/splitbar/FloatingWindowService.java
new file mode 100644
index 0000000..25b89fa
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/splitbar/FloatingWindowService.java
@@ -0,0 +1,629 @@
+package com.android.systemui.splitbar;
+import java.util.List;
+
+import android.app.ActivityManager;
+import android.app.ActivityManager.StackBoxInfo;
+import android.app.ActivityManager.StackInfo;
+import android.app.ActivityManagerNative;
+import android.app.Service;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.graphics.PixelFormat;
+import android.graphics.Point;
+import android.os.IBinder;
+import android.util.FloatMath;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Paint.Style;
+import android.graphics.Path;
+import android.graphics.PixelFormat;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Region;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Message;
+import android.os.RemoteException;
+import android.os.UserHandle;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnTouchListener;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import android.view.WindowManager.LayoutParams;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import com.android.systemui.R;
+import android.util.SparseArray;
+
+import com.android.systemui.recent.RecentsActivity;
+import com.android.systemui.splitbar.view.animation.InOutAnimation;
+import com.android.systemui.splitbar.view.animation.MenuButtonAnimation;
+import static com.android.server.wm.StackBox.SPLIT_SPACE;
+
+public class FloatingWindowService extends Service {
+
+    public static String TAG = "FloatingWindowService";
+    boolean DBG = false;
+    public static String ADD_SPLIT_UI = "addSplitUI";
+    public static int CENTER_POINT_WIDTH = 70;  //the width of the round touch circle
+        /*Lenovo sw, xieqiong2 add 2014.1.28 BLADEFHD-283*/
+        private static int MOVE_POINT_RADIUS = 50;  //the radius of the dragging circle
+    private static float SPLIT_MIN = 0.25f;
+    private static float SPLIT_MAX = 0.75f;
+    private static int PADDING = 30;
+    private static int MENU_ANM_RADIUS = 100;
+
+    // Flag to show drag area.
+    private static WindowManager wm = null;
+   private StackBoxInfoUtils sbiUtils;
+
+    // current configurations
+    private int mStackWindowNum = 0;
+    private int mStatusBarHight = 0;
+    private int mTotalHeight = 0;
+    private int mTotalWidth = 0;
+    private boolean bPortraitMode = false;
+    private int DRAG_H_MIN = 0;
+    private int DRAG_H_MAX = 0;
+    private int DRAG_W_MIN = 0;
+    private int DRAG_W_MAX = 0;
+    private Point mCurrentPoint = null;
+    private Point mOutSize = null;
+
+    SparseArray<Rect> mIdToRect;
+
+    private View mPointView = null;
+    private ImageView mDragView = null;
+    private static WindowManager.LayoutParams mSplitLayoutParams = null;
+    private static WindowManager.LayoutParams mDragLayoutParams = null;
+
+    private boolean mViewAdded = false;
+
+    private boolean mCloseButtonShowing;
+    private ViewGroup mCloseButtonsWrapper;
+    private ViewGroup mMenuWrapper;
+    private ImageView mSplitPoint;
+    
+    final class H extends Handler{
+        public static final int REPORT_SPLITBAR_CHANGE = 1;
+
+        public static final int REPORT_MENU_DISMISS = 2;
+
+        public static final int REPORT_SPLITVIEW_REFRESH = 3;
+
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+            case REPORT_SPLITBAR_CHANGE: {
+                addorUpdateView();
+            }
+                break;
+            case REPORT_MENU_DISMISS: {
+                dismissMenuButtons();
+            }
+                break;
+            case REPORT_SPLITVIEW_REFRESH: {
+                if(DBG) Log.d(TAG, "receive REPORT_SPLITVIEW_REFRESH.");
+                initialPosition();
+                //Lenovo sw, xieqiong2 2014.2.28  BLADEFHD-2876: to fix the position while the menu is opened.
+                mSplitLayoutParams.x = mCurrentPoint.x - (mCloseButtonShowing?MENU_ANM_RADIUS:0);
+                mSplitLayoutParams.y = mCurrentPoint.y - (mCloseButtonShowing?MENU_ANM_RADIUS:0);
+                if (mViewAdded) {
+                    wm.updateViewLayout(mPointView, mSplitLayoutParams);
+                    mPointView.setOnSystemUiVisibilityChangeListener(mOnSystemUiVisibilityChangeListener);
+                }
+            }
+                break;
+            default:
+                break;
+            }
+        }
+    }
+    final H mH = new H();
+    private void timedDismiss(){
+        mH.removeMessages(H.REPORT_MENU_DISMISS);
+        mH.sendEmptyMessageDelayed(H.REPORT_MENU_DISMISS, 3000);
+    }
+
+    private void timedTrigger(){
+        mH.removeMessages(H.REPORT_SPLITBAR_CHANGE);
+        mH.sendEmptyMessageDelayed(H.REPORT_SPLITBAR_CHANGE, 500);
+    }
+
+    private void timedRefresh(){
+        mH.removeMessages(H.REPORT_SPLITVIEW_REFRESH);
+        mH.sendEmptyMessageDelayed(H.REPORT_SPLITVIEW_REFRESH, 500);
+    }
+
+    private void vibrate() {
+        android.os.Vibrator vib = (android.os.Vibrator) getApplicationContext()
+                .getSystemService(Context.VIBRATOR_SERVICE);
+        vib.vibrate(50);
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        wm = (WindowManager) getApplicationContext().getSystemService(
+                Context.WINDOW_SERVICE);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+    }
+
+    @Override
+    public void onStart(Intent intent, int startId) {
+        super.onStart(intent, startId);
+        boolean add = false;
+        if(intent != null){
+            add = intent.getBooleanExtra(ADD_SPLIT_UI, false);
+        }
+        if(DBG) Log.d(TAG, "onStart: intent ADD_SPLIT_UI = " + add);
+        if (add) {
+            addorUpdateView();
+        } else {
+            removeViews();
+        }
+    }
+
+    // mConfigurationReceiver
+    BroadcastReceiver mConfigurationReceiver = new BroadcastReceiver() {
+        public void onReceive(Context context, Intent intent) {
+            if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {
+                timedTrigger();
+            }
+        }
+    };
+
+    /**
+     * onConfigurationChanged
+     */
+    private void getCurrentConfiguration() {
+        // get window width
+        if (mOutSize == null) {
+            mOutSize = new Point();
+        }
+        wm.getDefaultDisplay().getSize(mOutSize);
+
+        int curRotation = wm.getDefaultDisplay().getRotation();
+        if (curRotation == Surface.ROTATION_0 || curRotation == Surface.ROTATION_180){
+            bPortraitMode = false;
+        } else {
+            bPortraitMode = true;
+        }
+
+        int statusBarHeight =  StackBoxInfoUtils.getStatusBarHeight(getApplicationContext());
+        mTotalWidth = mOutSize.x;
+        /*Lenovo sw, xieqiong2 modify 2014.1.16 BLADEFHD-283*/
+        mTotalHeight = mOutSize.y - statusBarHeight;
+
+        DRAG_H_MIN = (int) (mTotalHeight * SPLIT_MIN);
+        DRAG_H_MAX = (int) (mTotalHeight * SPLIT_MAX);
+        DRAG_W_MIN = (int) (mTotalWidth * SPLIT_MIN);
+        DRAG_W_MAX = (int) (mTotalWidth * SPLIT_MAX);
+    }
+
+    View.OnSystemUiVisibilityChangeListener mOnSystemUiVisibilityChangeListener
+           = new View.OnSystemUiVisibilityChangeListener(){
+        public void onSystemUiVisibilityChange(int visibility) {
+            timedRefresh();
+        }
+    };
+
+    /**
+     * 判断位置是否合法，并返回合法位置
+     * @param rawX
+     * @param rawY
+     * @return
+     */
+    private Point getAdjustedPosition(int rawX, int rawY) {
+        Point rp = new Point();
+        if (rawX < DRAG_W_MIN) {
+            rp.x = DRAG_W_MIN;
+        } else if (rawX > DRAG_W_MAX) {
+            rp.x = DRAG_W_MAX;
+        } else {
+            rp.x = rawX;
+        }
+
+        if (rawY < DRAG_H_MIN) {
+            rp.y = DRAG_H_MIN;
+        } else if (rawY > DRAG_H_MAX) {
+            rp.y = DRAG_H_MAX;
+        } else {
+            rp.y = rawY;
+        }
+
+        return rp;
+    }
+
+    /**
+     * 初始化点的位置
+     */
+    private void initialPosition() {
+        sbiUtils = new StackBoxInfoUtils();
+        mStackWindowNum = sbiUtils.getTotalWindows();
+        mIdToRect = sbiUtils.getIdToRect();
+        int[] point = sbiUtils.getSpiltWinCenterXY(bPortraitMode);
+        if (mCurrentPoint == null) {
+            mCurrentPoint = new Point();
+        }
+        mCurrentPoint.x = point[0];
+        mCurrentPoint.y = point[1];
+
+    }
+
+    private void createFloatView() {
+        mPointView = LayoutInflater.from(this).inflate(R.layout.split_point, null);
+        mPointView.setOnSystemUiVisibilityChangeListener(mOnSystemUiVisibilityChangeListener);
+
+        mSplitLayoutParams = new LayoutParams(LayoutParams.WRAP_CONTENT,
+                LayoutParams.WRAP_CONTENT, LayoutParams.TYPE_PHONE,
+                LayoutParams.FLAG_NOT_TOUCH_MODAL
+                                | LayoutParams.FLAG_ALT_FOCUSABLE_IM
+                        | LayoutParams.FLAG_NOT_FOCUSABLE,
+                PixelFormat.TRANSPARENT);
+        mSplitLayoutParams.gravity = Gravity.LEFT | Gravity.TOP;
+        mSplitLayoutParams.format = PixelFormat.RGBA_8888;
+
+        mSplitLayoutParams.width = CENTER_POINT_WIDTH;
+        mSplitLayoutParams.height = CENTER_POINT_WIDTH;
+        mSplitLayoutParams.x = mCurrentPoint.x;
+        mSplitLayoutParams.y = mCurrentPoint.y;
+        mSplitLayoutParams.windowAnimations = 0;
+        // disable animation cause it looks ugly ...
+        mSplitLayoutParams.privateFlags |= WindowManager.LayoutParams.PRIVATE_FLAG_NO_MOVE_ANIMATION;
+
+        mCloseButtonsWrapper = (ViewGroup) mPointView.findViewById(R.id.close_buttons_wrapper);
+        filterCloseButtonInfo(mCloseButtonsWrapper);
+
+        mMenuWrapper = (ViewGroup) mPointView.findViewById(R.id.menu_wrapper);
+        filterMenuInfo(mMenuWrapper);
+
+        mSplitPoint = (ImageView) mPointView.findViewById(R.id.split_point);
+        for (int i = 0; i < mCloseButtonsWrapper.getChildCount(); i++) {
+            mCloseButtonsWrapper.getChildAt(i).setOnTouchListener(wrapperTouchListener);
+            mCloseButtonsWrapper.getChildAt(i).setOnClickListener(
+                new OnClickListener() {
+                    public void onClick(View v) {
+                        dismissMenuButtons();
+                        int stackid = (Integer)v.getTag();
+                        removeStack(stackid);
+                        timedTrigger();
+                    }
+
+                    private void removeStack(int stackId) {
+                        try {
+                            ActivityManagerNative.getDefault().removeStack(stackId, false);
+                        } catch (RemoteException e) {
+                            Log.e(TAG, "", e);
+                        }
+                    }
+                });
+        }
+
+        for (int i = 0; i < mMenuWrapper.getChildCount(); i++) {
+            mMenuWrapper.getChildAt(i).setOnTouchListener(wrapperTouchListener);
+            mMenuWrapper.getChildAt(i).setOnClickListener(
+                    new OnClickListener() {
+                        public void onClick(View v) {
+                            dismissMenuButtons();
+                            switch (v.getId()) {
+                            case R.id.menu_add_first:
+                            case R.id.menu_add_second:
+                                Intent intent = new Intent(RecentsActivity.TOGGLE_RECENTS_INTENT);
+                                intent.setClassName("com.android.systemui","com.android.systemui.recent.RecentsActivity");
+                                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
+                                        | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
+                                getApplicationContext().startActivityAsUser(intent, new UserHandle(UserHandle.USER_CURRENT));
+                                break;
+                            case R.id.menu_max_first:
+                            case R.id.menu_max_second:
+                                MaxFocusedWindow();
+                                break;
+                            }
+                        }
+                    });
+        }
+
+        mSplitPoint.setOnTouchListener(pointViewTouchListener);
+
+        wm.addView(mPointView, mSplitLayoutParams);
+        mStatusBarHight = StackBoxInfoUtils.getStatusBarHeight(getApplicationContext());
+    }
+
+    OnTouchListener wrapperTouchListener = new OnTouchListener() {
+        public boolean onTouch(View v, MotionEvent event) {
+            switch (event.getAction()) {
+                case MotionEvent.ACTION_DOWN:
+                    sbiUtils.setLockFocusSwitch(true);
+                    break;
+            }
+            return false;
+        }
+    };
+
+    OnTouchListener pointViewTouchListener = new OnTouchListener() {
+        boolean bMoved = false;
+        float[] temp = new float[2];
+
+        public boolean onTouch(View v, MotionEvent event) {
+            switch (event.getAction()) {
+            case MotionEvent.ACTION_DOWN:
+                if(DBG) Log.d(TAG, "ACTION_DOWN");
+                vibrate();
+                bMoved = false;
+                temp[0] = event.getX();
+                temp[1] = event.getY();
+                sbiUtils.setLockFocusSwitch(true);
+                break;
+            case MotionEvent.ACTION_MOVE:
+                if(DBG) Log.d(TAG, "ACTION_MOVE");
+                float space = moveSpace(event, temp);
+                if (space > 10f) {
+                    if(DBG) Log.d(TAG, "space > 10f");
+                    dismissMenuButtons();
+                    bMoved = true;
+                    mCurrentPoint = getAdjustedPosition((int) event.getRawX(),
+                            (int) event.getRawY());
+                                        /*Lenovo sw, xieqiong2 modify 2014.1.28 BLADEFHD-283*/
+                                        if (mDragView == null ) {
+                        initDragViews();
+                                        }
+                    mDragView.invalidate();
+                }
+                break;
+            case MotionEvent.ACTION_UP:
+                if(DBG) Log.d(TAG, "ACTION_UP");
+                if (!bMoved) {
+                    // deal it like a click event
+                    toggleMenuButtons();
+                } else {
+                    bMoved = false;
+                    /*Lenovo sw, xieqiong2 to fix the center point display issue 2014.1.28 BLADEFHD-283*/
+                    mSplitLayoutParams.x = mCurrentPoint.x - (int)(CENTER_POINT_WIDTH*0.5);
+                    mSplitLayoutParams.y = mCurrentPoint.y - (int)(CENTER_POINT_WIDTH*0.5);
+                    wm.updateViewLayout(mPointView, mSplitLayoutParams);
+                    mPointView.setOnSystemUiVisibilityChangeListener(mOnSystemUiVisibilityChangeListener);
+                    stopDragging();
+                    sbiUtils.refreshAfterDrag(mCurrentPoint.x,mCurrentPoint.y,bPortraitMode);
+                }
+                break;
+            }
+            return true;
+        }
+    };
+
+    /**
+     * refresh float split view
+     */
+    private void addorUpdateView() {
+        if (mViewAdded) {
+            removeViews();
+        }
+        getCurrentConfiguration();
+        initialPosition();
+        createFloatView();
+        stopDragging();
+        // register rotations
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
+        registerReceiver(mConfigurationReceiver, filter);
+        mViewAdded = true;
+    }
+
+    /**
+     * close float split view
+     */
+    private void removeViews() {
+        mH.removeMessages(H.REPORT_SPLITBAR_CHANGE);
+        mH.removeMessages(H.REPORT_MENU_DISMISS);
+        mH.removeMessages(H.REPORT_SPLITVIEW_REFRESH);
+        if (mViewAdded) {
+            wm.removeView(mPointView);
+            // unregister rotations
+            unregisterReceiver(mConfigurationReceiver);
+            mViewAdded = false;
+            mCloseButtonShowing = false;
+        }
+    }
+
+    private void initDragViews() {
+        mDragView = new DrawImageView(getApplicationContext());
+        mDragView.setImageResource(R.drawable.split_drag_background_drawable);
+
+        mDragLayoutParams = new LayoutParams(LayoutParams.WRAP_CONTENT,
+                LayoutParams.WRAP_CONTENT, LayoutParams.TYPE_PHONE,
+                LayoutParams.FLAG_NOT_TOUCH_MODAL
+                | LayoutParams.FLAG_NOT_FOCUSABLE
+                | LayoutParams.FLAG_LAYOUT_IN_SCREEN
+                                | LayoutParams.FLAG_ALT_FOCUSABLE_IM
+                , PixelFormat.TRANSPARENT);
+        mDragLayoutParams.gravity = Gravity.LEFT | Gravity.TOP;
+        mDragLayoutParams.format = PixelFormat.RGBA_8888;
+
+        mDragLayoutParams.x = 0;
+        mDragLayoutParams.y = 0;
+        mDragLayoutParams.width = mOutSize.x;
+        mDragLayoutParams.height = mOutSize.y;
+        mDragLayoutParams.windowAnimations = 0;
+
+        wm.addView(mDragView, mDragLayoutParams);
+        mDragView.setDrawingCacheEnabled(true);
+                mDragView.setOnClickListener(new OnClickListener(){
+
+                        @Override
+                        public void onClick(View v) {
+                            stopDragging();
+                            addorUpdateView();
+                        }
+                });
+    }
+
+    private void stopDragging() {
+        if (mDragView != null) {
+            wm.removeView(mDragView);
+            mDragView.setImageDrawable(null);
+            mDragView = null;
+        }
+    }
+
+    private void filterCloseButtonInfo(ViewGroup group) {
+        if (group == null) {
+            return;
+        }
+        View[] tempView = new View[8];
+        int j = 0;
+        int[] closeMenuInfo = sbiUtils.getCloseMenuInfo(bPortraitMode);
+        for (int i = 0; i < closeMenuInfo.length; i++) {
+            if (closeMenuInfo[i] != 0) {
+                group.getChildAt(i).setTag(closeMenuInfo[i]);
+            } else {
+                tempView[j++] = group.getChildAt(i);
+            }
+        }
+        for (int m = 0; m < j; m++) {
+            group.removeView(tempView[m]);
+        }
+        tempView = null;
+    }
+
+    private void filterMenuInfo(ViewGroup group) {
+        if (group == null) {
+            return;
+        }
+
+        int[] closeMenuInfo = sbiUtils.getCloseMenuInfo(bPortraitMode);
+        for (int i = 0; i < closeMenuInfo.length; i++) {
+            if (closeMenuInfo[i] == 0 && i % 2 == 0) {
+                if (i == 0 && closeMenuInfo[4] == 0) {
+                    group.removeViewAt(3);
+                    group.removeViewAt(1);
+                } else {
+                    group.removeViewAt(2);
+                    group.removeViewAt(0);
+                }
+                break;
+            }
+        }
+    }
+
+    private void MaxFocusedWindow() {
+        int focusedStack = sbiUtils.getFocusedStack();
+        Log.d(TAG, "focusedStack:" + focusedStack);
+        Rect rect = mIdToRect.get(focusedStack);
+        if (rect == null) {
+            return;
+        }
+        if (rect.contains(StackBoxInfoUtils.DETECT_OFFSET, StackBoxInfoUtils.DETECT_OFFSET)) {
+            sbiUtils.refreshAfterDrag(DRAG_W_MAX, DRAG_H_MAX, bPortraitMode);
+        } else if (rect.contains(StackBoxInfoUtils.DETECT_OFFSET, mTotalHeight - StackBoxInfoUtils.DETECT_OFFSET)) {
+            sbiUtils.refreshAfterDrag(DRAG_W_MAX, DRAG_H_MIN, bPortraitMode);
+        } else if (rect.contains(mTotalWidth - StackBoxInfoUtils.DETECT_OFFSET, StackBoxInfoUtils.DETECT_OFFSET)) {
+            sbiUtils.refreshAfterDrag(DRAG_W_MIN, DRAG_H_MAX, bPortraitMode);
+        } else if (rect.contains(mTotalWidth - StackBoxInfoUtils.DETECT_OFFSET, mTotalHeight - StackBoxInfoUtils.DETECT_OFFSET)) {
+            sbiUtils.refreshAfterDrag(DRAG_W_MIN, DRAG_H_MIN, bPortraitMode);
+        }
+        timedRefresh();
+    }
+
+    class DrawImageView extends ImageView {
+
+        private Paint paint;
+
+        public DrawImageView(Context context) {
+            super(context);
+            paint = new Paint();
+            paint.setAntiAlias(true);
+            paint.setStyle(Style.STROKE);
+            paint.setStrokeWidth(5);
+            paint.setColor(Color.rgb(57, 187, 224));
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            super.onDraw(canvas);
+            int ra = MOVE_POINT_RADIUS;
+            Path path = new Path();
+            Point point = new Point();
+            Log.d(TAG, "onDraw, mCurrentPoint x, y =" + mCurrentPoint.x + "," + mCurrentPoint.y);
+            /*Lenovo sw, xieqiong2 to fix the drag circle display issue 2014.1.28 BLADEFHD-283*/
+            point.x = mCurrentPoint.x;
+            point.y = mCurrentPoint.y + StackBoxInfoUtils.getStatusBarHeight(getApplicationContext());
+            path.moveTo(point.x , point.y);
+            path.addCircle(point.x, point.y, ra, Path.Direction.CCW);
+            canvas.clipPath(path, Region.Op.XOR);
+
+            float mradius = 5.0f;
+            SparseArray<Rect> moveRect = sbiUtils.getMovePanelXY(mCurrentPoint.x, mCurrentPoint.y, bPortraitMode);
+            for (int i = 0; i < moveRect.size(); i++) {
+                Rect rect = moveRect.get(moveRect.keyAt(i));
+                RectF r = new RectF(rect.left, rect.top, rect.right,
+                        rect.bottom);
+                canvas.drawRoundRect(r, mradius, mradius, paint);
+            }
+
+            canvas.drawCircle(point.x, point.y, ra, paint);
+        }
+    }
+
+    private void toggleMenuButtons() {
+        if (!mCloseButtonShowing) {
+            mSplitLayoutParams.width = CENTER_POINT_WIDTH + MENU_ANM_RADIUS*2;
+            mSplitLayoutParams.height = CENTER_POINT_WIDTH + MENU_ANM_RADIUS*2;
+            mSplitLayoutParams.x = mSplitLayoutParams.x - MENU_ANM_RADIUS;
+            mSplitLayoutParams.y = mSplitLayoutParams.y - MENU_ANM_RADIUS;
+            wm.updateViewLayout(mPointView, mSplitLayoutParams);
+            MenuButtonAnimation.startAnimations(
+                    this.mCloseButtonsWrapper, InOutAnimation.Direction.IN);
+            MenuButtonAnimation.startAnimations(
+                    this.mMenuWrapper, InOutAnimation.Direction.IN);
+            mCloseButtonShowing = true;
+            timedDismiss();
+        } else {
+            dismissMenuButtons();
+        }
+    }
+
+    private void dismissMenuButtons() {
+        if (mCloseButtonShowing) {
+            mSplitLayoutParams.width = CENTER_POINT_WIDTH;
+            mSplitLayoutParams.height = CENTER_POINT_WIDTH;
+            mSplitLayoutParams.x = mSplitLayoutParams.x + MENU_ANM_RADIUS;
+            mSplitLayoutParams.y = mSplitLayoutParams.y + MENU_ANM_RADIUS;
+            wm.updateViewLayout(mPointView, mSplitLayoutParams);
+            MenuButtonAnimation.startAnimations(
+                    this.mCloseButtonsWrapper, InOutAnimation.Direction.OUT);
+            MenuButtonAnimation.startAnimations(
+                    this.mMenuWrapper, InOutAnimation.Direction.OUT);
+            mCloseButtonShowing = false;
+            mH.removeMessages(H.REPORT_MENU_DISMISS);
+        }
+    }
+
+    /** Determine the space when move */
+    private float moveSpace(MotionEvent event, float[] temp) {
+        float x = event.getX() - temp[0];
+        float y = event.getY() - temp[1];
+        return FloatMath.sqrt(x * x + y * y);
+    }
+
+}
diff --git a/packages/SystemUI/src/com/android/systemui/splitbar/StackBoxInfoUtils.java b/packages/SystemUI/src/com/android/systemui/splitbar/StackBoxInfoUtils.java
new file mode 100644
index 0000000..dbab5cf
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/splitbar/StackBoxInfoUtils.java
@@ -0,0 +1,549 @@
+package com.android.systemui.splitbar;
+
+import android.app.ActivityManager.StackBoxInfo;
+import android.app.ActivityManager.StackInfo;
+import android.app.ActivityManagerNative;
+import android.content.Context;
+import android.graphics.Rect;
+import android.os.RemoteException;
+import android.util.Log;
+import android.util.SparseArray;
+import android.view.WindowManager;
+
+import java.util.ArrayDeque;
+import java.util.List;
+
+import static com.android.server.wm.StackBox.SPLIT_SPACE;
+
+public class StackBoxInfoUtils {
+    static final String TAG = "StackBoxInfoUtils";
+    boolean DBG = false;
+    private int HALF_POINT_WIDTH = (int)(FloatingWindowService.CENTER_POINT_WIDTH*0.5);
+    public int mDockWindowStackId;
+    public int mLeftDockWindowStackId;
+    public int mNewWindowsplitPolicy;
+
+    StackBoxInfo homeStackBoxInfo = null;
+    StackBoxInfo appStackBoxInfo = null;
+    SparseArray<Rect> mIdToRect = new SparseArray<Rect>();
+    SparseArray<String> mTaskId2Name = new SparseArray<String>();
+    SparseArray<StackInfo> mStackID2Info = new SparseArray<StackInfo>();
+
+    static final int POP_UP_MENU_NUM = 8;
+    static final int DETECT_OFFSET = 80;
+    static final int MAX_WIN_NUM = 4;
+
+    /*Lenovo sw begin, xieqiong2 2014.1.16 BLADEFHD-283*/
+    static final int CloseMenu[][]
+                    = {{0,0,0,0,0,0,0,0},
+                       {1,0,0,0,1,0,0,0},
+                       {1,0,0,0,1,0,0,0},
+                       {0,1,0,0,1,0,0,1},
+                       {1,0,0,1,0,1,0,0},
+                       {0,1,0,0,1,0,0,1},
+                       {1,0,0,1,0,1,0,0},
+                       {0,1,0,1,0,1,0,1},
+                       {0,1,0,1,0,1,0,1}};
+
+    //Definition for all the window display mode
+    public enum WinDisplayMode {
+       One,
+       TwoLd,
+       TwoPr,
+       ThreeLdLtSplit,  //three windows in landscape with 2 windows in the left, 1 window in the right.
+       ThreeLdRtSplit,
+       ThreePrTpSplit,  //three windows in portrait with 2 windows in the top, 1 window in the bottom.
+       ThreePrBtSplit,
+       FourLd,
+       FourPr,
+       Invalid
+    }
+     /*Lenovo sw end, xieqiong2 2014.1.16 BLADEFHD-283*/
+
+    // constructor to get stackbox Infos
+    public StackBoxInfoUtils() {
+        mDockWindowStackId = -1;
+        mNewWindowsplitPolicy = -1;
+        appStackBoxInfo = null;
+        homeStackBoxInfo = null;
+        try {
+            List<StackBoxInfo> sbis = ActivityManagerNative.getDefault()
+                .getStackBoxes();
+            if (sbis.size() > 1) {
+                for (StackBoxInfo stackBoxInfo : sbis) {
+                    /*Begin,Lenovo sw, Tom-liming11 2014.03.20, null exception*/
+                    if (stackBoxInfo != null && stackBoxInfo.stackId != 0) {
+                    /*End,Lenovo sw, Tom-liming11 2014.03.20, null exception*/
+                        appStackBoxInfo = stackBoxInfo;
+                        //break; // we may need to consider multiple user later
+                        // instead of break
+                    } else {
+                        homeStackBoxInfo = stackBoxInfo;
+                    }
+                }
+            }
+
+            if (appStackBoxInfo != null) {
+                collectAppStackInfo(appStackBoxInfo);
+                visitStackBoxes(appStackBoxInfo);
+            }
+
+        } catch (RemoteException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public int getTotalWindows() {
+        return mIdToRect.size();
+    }
+    
+    public SparseArray<Rect> getIdToRect() {
+        return mIdToRect;
+    }
+
+    public int getStackIdfromPoint(int x, int y) {
+        for (int i = 0; i < mIdToRect.size(); i++) {
+            int key = mIdToRect.keyAt(i);
+            Rect rect = mIdToRect.get(key);
+            if (rect.contains(x, y)) {
+                return key;
+            }
+        }
+        return -1;
+    }
+
+    public int getTaskIdFromNameInfo(String taskName){
+        for (int i = 0; i < mTaskId2Name.size(); i++) {
+            int key = mTaskId2Name.keyAt(i);
+            String name = mTaskId2Name.get(key);
+            if (taskName.equalsIgnoreCase(name)) {
+                return key;
+            }
+        }
+        return -1;
+    }
+    
+    public StackInfo getStackFromStackId(int stackId){
+        return mStackID2Info.get(stackId);
+    }
+
+    public int getFocusedStack() {
+        int focusedStack = -1;
+        try {
+            focusedStack = ActivityManagerNative.getDefault().getFocusedStack2();
+        } catch (RemoteException e) {
+            e.printStackTrace();
+        }
+        return focusedStack;
+    }
+
+    public int addNewWindow() {
+        return addNewWindow(false);
+    }
+
+    public int addNewWindow(boolean bLeft) {
+        int newStackId = -1;
+        if (getTotalWindows() > 0) {
+            try {
+                newStackId = ActivityManagerNative.getDefault().createStack(-1,
+                        (bLeft==true && mLeftDockWindowStackId!=-1)?mLeftDockWindowStackId:mDockWindowStackId, mNewWindowsplitPolicy,// StackBox.TASK_STACK_GOES_ABOVE,
+                        mNewWindowsplitPolicy==3?0.5f:0.36f);
+                ActivityManagerNative.getDefault().setFocusedStack2(newStackId);
+                return newStackId;
+            } catch (RemoteException e) {
+                e.printStackTrace();
+            }
+        }
+        return newStackId;
+    }
+
+    public int setTargetWindow(int index, boolean portMode) {
+        int newStackId = getStackIdByIndex(index, portMode);
+
+        try {
+            ActivityManagerNative.getDefault().setFocusedStack2(newStackId);
+        } catch (RemoteException e) {
+            e.printStackTrace();
+        }
+        return newStackId;
+    }
+
+    /*Lenovo sw begin, xieqiong2 2014.1.16 BLADEFHD-283*/
+    public WinDisplayMode getDisplayMode(boolean portMode) {
+        int num = getTotalWindows();
+        WinDisplayMode mode = WinDisplayMode.Invalid;
+        if ((num <= 0) || (num > MAX_WIN_NUM)) {
+            if(DBG) Log.d(TAG, "invalid display mode!");
+        } else {
+          switch (num){
+            case 1:
+              mode = WinDisplayMode.One;
+              break;
+            case 2:
+              mode = portMode?WinDisplayMode.TwoPr:WinDisplayMode.TwoLd;
+              break;
+            case 3:
+              Rect totalScreen = homeStackBoxInfo.bounds;
+              int screenWidth = totalScreen.width();
+              int screenHeight = totalScreen.height();
+              int id1 = getStackIdfromPoint(DETECT_OFFSET, DETECT_OFFSET);
+              int id2 = getStackIdfromPoint(DETECT_OFFSET, screenHeight - DETECT_OFFSET);
+              int id3 = getStackIdfromPoint(screenWidth - DETECT_OFFSET,DETECT_OFFSET);
+              if(portMode){
+                 mode = (id1==id3)?WinDisplayMode.ThreePrBtSplit:WinDisplayMode.ThreePrTpSplit;
+              } else {
+                 mode = (id1==id2)?WinDisplayMode.ThreeLdRtSplit:WinDisplayMode.ThreeLdLtSplit;
+              }
+              break;
+            case 4:
+              mode = portMode?WinDisplayMode.FourPr:WinDisplayMode.FourLd;
+              break;
+            default:
+              break;
+           }
+        }
+        if(DBG) Log.d(TAG, "getDisplayMode = " + mode);
+        return mode;
+    }
+    /*Lenovo sw end, xieqiong2 2014.1.16 BLADEFHD-283*/
+
+    // This function is for 1-4 windows only!hard coded!!!
+    // 1,2,3,4 as parameter
+    // start from 1!
+    public int getStackIdByIndex(int index, boolean portMode) {
+        WinDisplayMode mode = getDisplayMode(portMode);
+        if (mode == WinDisplayMode.Invalid || index <= 0 || index > MAX_WIN_NUM) {
+            return -1;
+        }
+        Rect totalScreen = homeStackBoxInfo.bounds;
+        int screenWidth = totalScreen.width();
+        int screenHeight = totalScreen.height();
+
+        switch(index) {
+            case 1:
+                return getStackIdfromPoint(DETECT_OFFSET, DETECT_OFFSET);
+            case 2:
+                switch (mode) {
+                     case TwoPr:
+                          return getStackIdfromPoint(DETECT_OFFSET, screenHeight - DETECT_OFFSET);
+                     case TwoLd:
+                          return getStackIdfromPoint(screenWidth - DETECT_OFFSET,DETECT_OFFSET);
+                     case ThreePrBtSplit:
+                     case ThreePrTpSplit:
+                     case FourPr:
+                          return getStackIdfromPoint(DETECT_OFFSET,screenHeight - DETECT_OFFSET);
+                     case ThreeLdLtSplit:
+                     case ThreeLdRtSplit:
+                     case FourLd:
+                          return getStackIdfromPoint(screenWidth - DETECT_OFFSET, DETECT_OFFSET);
+                 }
+                 break;
+             case 3:
+                switch (mode) {
+                     case ThreeLdRtSplit:
+                     case ThreePrBtSplit:
+                     case FourPr:
+                     case FourLd:
+                          return getStackIdfromPoint(screenWidth - DETECT_OFFSET,screenHeight - DETECT_OFFSET);
+                }
+                break;
+              case 4:
+                switch (mode) {
+                     case ThreePrTpSplit:
+                     case FourPr:
+                          return getStackIdfromPoint(screenWidth - DETECT_OFFSET, DETECT_OFFSET);
+                     case ThreeLdLtSplit:
+                     case FourLd:
+                          return getStackIdfromPoint(DETECT_OFFSET, screenHeight - DETECT_OFFSET);
+                }
+        }
+        return -1;
+    }
+
+    class CombinedStackBoxInfo {
+        StackBoxInfo mStackBoxNode;
+        boolean oddNote;
+
+        CombinedStackBoxInfo(StackBoxInfo node, boolean odd) {
+            mStackBoxNode = node;
+            oddNote = odd;
+        }
+    }
+
+    private void visitStackBoxes(StackBoxInfo stackBoxInfoNode) {
+        if (stackBoxInfoNode != null) {
+            if (stackBoxInfoNode.children != null) {
+                visitStackBoxes(stackBoxInfoNode.children[0]);
+                visitStackBoxes(stackBoxInfoNode.children[1]);
+            } else {
+                // target reached, do something
+                mIdToRect
+                    .put(stackBoxInfoNode.stackId, stackBoxInfoNode.bounds);
+                mStackID2Info
+                    .put(stackBoxInfoNode.stackId,stackBoxInfoNode.stack);
+                for (int i=0;i<stackBoxInfoNode.stack.taskIds.length;i++){
+                    mTaskId2Name.put(stackBoxInfoNode.stack.taskIds[i], stackBoxInfoNode.stack.taskNames[i]);
+                    Log.d(TAG, "taskid:" + stackBoxInfoNode.stack.taskIds[i] + ",taskname:" + stackBoxInfoNode.stack.taskNames[i]);
+                }
+            }
+        }
+    }
+
+    /*Lenovo sw begin, xieqiong2 2014.1.16 BLADEFHD-283*/
+    public int[] getSpiltWinCenterXY(boolean portMode) {
+        int touchXY[] = {0, 0};
+        StackBoxInfo tempSb = appStackBoxInfo;
+        if (tempSb == null){
+            return touchXY;
+        }
+        int splitSpace = (int)(SPLIT_SPACE*0.5);
+        WinDisplayMode mode = getDisplayMode(portMode);
+
+        /*Lenovo sw add, xieqiong2 2014.1.28 BLADEFHD-283, to handle the 3 windows special cases*/
+        if(mode == WinDisplayMode.ThreePrTpSplit || mode == WinDisplayMode.ThreeLdLtSplit) {
+            if(tempSb.children != null && tempSb.children[0].children != null) {
+                touchXY[0] = tempSb.children[0].children[0].bounds.width() + splitSpace - HALF_POINT_WIDTH;
+                touchXY[1] = tempSb.children[0].children[0].bounds.height() + splitSpace - HALF_POINT_WIDTH;
+            }
+        } else {
+            for (;;){
+                if(DBG) Log.d(TAG, "stackbox " + "id " + tempSb.stackBoxId + ", stackBoxId" + tempSb.stackBoxId + " = rect = "+ tempSb.bounds.left + " " + tempSb.bounds.right + " " + tempSb.bounds.top + " " + tempSb.bounds.bottom);
+                if (tempSb.children == null) {
+                     touchXY[0] = (tempSb.bounds.left == homeStackBoxInfo.bounds.left)
+                                    ?0:(homeStackBoxInfo.bounds.width()-tempSb.bounds.width()-splitSpace-HALF_POINT_WIDTH);
+                     touchXY[1] = (tempSb.bounds.top == homeStackBoxInfo.bounds.top)
+                                    ?0:(homeStackBoxInfo.bounds.height()-tempSb.bounds.height()-splitSpace-HALF_POINT_WIDTH);
+                     Log.d(TAG, "home height = " + homeStackBoxInfo.bounds.height());
+                     break;
+                } else {
+                     tempSb = tempSb.children[1];
+                }
+            }
+        }
+
+        //special handle for 2 window cases
+        if((touchXY[0] == 0) && (touchXY[1] > 0))
+              touchXY[0] = (int)(homeStackBoxInfo.bounds.width()*0.5 - HALF_POINT_WIDTH);
+        if((touchXY[0] > 0) && (touchXY[1] == 0))
+              touchXY[1] = (int)(homeStackBoxInfo.bounds.height()*0.5 - HALF_POINT_WIDTH);
+        if(DBG) Log.d(TAG, "x=" + touchXY[0] + ", y=" + touchXY[1]);
+        return touchXY;
+    }
+    
+    public void refreshAfterDrag(int x, int y, boolean portMode) {
+        float weightX, weightY;
+        weightX = weightY = 0f;
+
+        if(DBG) Log.d(TAG, "refreshAfterDrag, homestack = " + homeStackBoxInfo);
+        if(DBG) Log.d(TAG, "refreshAfterDrag, appStackBoxInfo = " + appStackBoxInfo);
+        if(DBG) Log.d(TAG , "touch x,y = " + x + "," + y);
+        weightX = (float)(x) / (float)(homeStackBoxInfo.bounds.width());
+        if(DBG) Log.d(TAG, "weightX = " + weightX);
+        weightY =  (float)(y) / (float)(homeStackBoxInfo.bounds.height());
+        if(DBG) Log.d(TAG, "homeStackBoxInfo.bounds.height() = " + homeStackBoxInfo.bounds.height());
+        if(DBG) Log.d(TAG, "weightY = " + weightY);
+        try {
+            if  (appStackBoxInfo.children != null) {
+                ActivityManagerNative.getDefault().resizeStackBox(appStackBoxInfo.children[0].stackBoxId, portMode?weightY:weightX);
+                if (appStackBoxInfo.children[0].children != null ) {
+                   ActivityManagerNative.getDefault().resizeStackBox(appStackBoxInfo.children[0].children[0].stackBoxId, portMode?weightX:weightY);
+                }
+                if (appStackBoxInfo.children[1].children != null) {
+                   ActivityManagerNative.getDefault().resizeStackBox(appStackBoxInfo.children[1].children[0].stackBoxId, portMode?weightX:weightY);
+                }
+            }
+        } catch (RemoteException e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    public void setLockFocusSwitch(boolean bLock){
+        try {
+                ActivityManagerNative.getDefault().setLockFocusSwitch(bLock);
+        } catch (RemoteException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public SparseArray<Rect> getMovePanelXY(int x, int y, boolean portMode){
+        SparseArray<Rect> moveRect = new SparseArray<Rect>();
+        int x1, x2, x3, x4, y1, y2, y3, y4;
+        int splitSpace = (int)(SPLIT_SPACE*0.5);
+
+        x1 = homeStackBoxInfo.bounds.left;
+        x2 = x1 + x - splitSpace;
+        x3 = x2 + SPLIT_SPACE;
+        x4 = homeStackBoxInfo.bounds.right;
+        y1 = homeStackBoxInfo.bounds.top;
+        y2 = y1 + y - splitSpace;
+        y3 = y2 + SPLIT_SPACE;
+        y4 = homeStackBoxInfo.bounds.bottom;
+
+        if  (appStackBoxInfo.children != null) {
+                if (appStackBoxInfo.children[0].children != null ) {
+                   Rect tmpBound1 = new Rect(x1,y1,x2,y2);
+                   moveRect.put(appStackBoxInfo.children[0].children[0].stackId, tmpBound1);
+                   Rect tmpBound2 = portMode?new Rect(x3,y1,x4,y2):new Rect(x1,y3,x2,y4);
+                   moveRect.put(appStackBoxInfo.children[0].children[1].stackId, tmpBound2);        
+                } else {
+                   Rect tmpBound = portMode?new Rect(x1,y1,x4,y2):new Rect(x1,y1,x2,y4);
+                   moveRect.put(appStackBoxInfo.children[0].stackId, tmpBound);
+                }
+                if (appStackBoxInfo.children[1].children != null) {
+                   Rect tmpBound1 = portMode?new Rect(x1,y3,x2,y4):new Rect(x3,y1,x4,y2);
+                   moveRect.put(appStackBoxInfo.children[1].children[0].stackId, tmpBound1);
+                   Rect tmpBound2 = new Rect(x3,y3,x4,y4);
+                   moveRect.put(appStackBoxInfo.children[1].children[1].stackId, tmpBound2);
+                } else {
+                   Rect tmpBound = portMode?new Rect(x1,y3,x4,y4):new Rect(x3,y1,x4,y4);
+                   moveRect.put(appStackBoxInfo.children[1].stackId, tmpBound);
+                }
+        }
+        if(DBG) Log.d(TAG, "moveRect = " + moveRect);
+        return moveRect;
+    }
+
+    int convertIdfromCloseMenuId(int i) {
+           switch (i) {
+               case 0:
+               case 1:
+                  return 1;
+               case 3:
+               case 4:
+                  return 2;
+               case 5:
+                  return 3;
+               case 7:
+                  return 4;
+               default:
+                  return -1;
+           }
+    }
+
+    public int[] getCloseMenuInfo(boolean portMode) {
+        int[] closeMenu = new int[POP_UP_MENU_NUM];
+        WinDisplayMode mode = getDisplayMode(portMode);
+        for(int i = 0; i < POP_UP_MENU_NUM; i++){
+           int value = CloseMenu[mode.ordinal()][i];
+           if(value == 1){ //find the close menu position
+                int index = convertIdfromCloseMenuId(i);
+                closeMenu[i] = getStackIdByIndex(index, portMode);
+           }
+        }
+        for(int j=0; j<8; j++) {
+           if(DBG) Log.d(TAG, "closeMenu[" + j + "]=" + closeMenu[j]);
+        }
+        return portMode ? formartCloseMeuuInfo(closeMenu) : closeMenu;
+    }
+
+    private int[] formartCloseMeuuInfo(int[] closeMenu) {
+        int[] temp = new int[POP_UP_MENU_NUM];
+        temp[0] = closeMenu[2];
+        temp[1] = closeMenu[1];
+        temp[2] = closeMenu[0];
+        temp[3] = closeMenu[7];
+        temp[4] = closeMenu[6];
+        temp[5] = closeMenu[5];
+        temp[6] = closeMenu[4];
+        temp[7] = closeMenu[3];
+        return temp;
+    }
+
+    public boolean isTaskInStack(int taskId, int stackId) {
+        StackInfo stack = mStackID2Info.get(stackId);
+        for (int i = 0; i < stack.taskIds.length; i++){
+           if(taskId == stack.taskIds[i]) {
+               return true;
+           }
+        }
+        return false;
+    }
+
+    public int getStackTaskSizeByStackId(int stackId){
+        return mStackID2Info.get(stackId).taskIds.length;
+    }
+
+    public int getStackIdByTaskId(int taskId) {
+        for(int i = 0; i < mStackID2Info.size(); i++) {
+           int stackId = mStackID2Info.keyAt(i);
+           if(isTaskInStack(taskId, stackId))
+               return stackId;
+        }
+        return -1;
+    }
+
+    public int getTopTaskIdByIndex(int index, boolean portMode) {
+        int stackId = getStackIdByIndex(index, portMode);
+        if(stackId >= 0) {
+            int length = mStackID2Info.get(stackId).taskIds.length;
+            if (length > 0) //in case the stack has no task but stack is still there!
+               return mStackID2Info.get(stackId).taskIds[length-1];
+        }
+        return -1;
+    }
+
+    public static int getStatusBarHeight (Context context) {
+        return context.getResources().getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
+    }
+    /*Lenovo sw end, xieqiong2 2014.1.16 BLADEFHD-283*/
+
+    private void collectAppStackInfo(StackBoxInfo appStackBoxInfo) {
+        mDockWindowStackId = -1;
+        mLeftDockWindowStackId = -1;
+        mNewWindowsplitPolicy = -1;
+        boolean bPreviousLevelCategory = true;
+        if (appStackBoxInfo == null) {
+            return;
+        }
+        // policy: 0: 4, 1:3
+        ArrayDeque<CombinedStackBoxInfo> queue = new ArrayDeque<CombinedStackBoxInfo>();
+        CombinedStackBoxInfo tmpInfo = new CombinedStackBoxInfo(
+                appStackBoxInfo, true);
+        queue.add(tmpInfo);
+        while (queue.isEmpty() == false) {
+            CombinedStackBoxInfo node = queue.remove();
+
+            if (bPreviousLevelCategory != node.oddNote){
+                bPreviousLevelCategory = node.oddNote;
+                if (node.mStackBoxNode.children == null) {
+                    mDockWindowStackId = node.mStackBoxNode.stackBoxId;
+                } else {
+                    if (node.mStackBoxNode.children[1] != null) {
+                        queue.add(new CombinedStackBoxInfo(
+                                    node.mStackBoxNode.children[1], !node.oddNote));
+                    }
+                    if (node.mStackBoxNode.children[0] != null) {
+                        queue.add(new CombinedStackBoxInfo(
+                                    node.mStackBoxNode.children[0], !node.oddNote));
+                    }
+                }
+            } else {
+                if (node.mStackBoxNode.children == null) {
+                    mLeftDockWindowStackId = node.mStackBoxNode.stackBoxId;
+                    if (mDockWindowStackId==-1){
+                        mDockWindowStackId = mLeftDockWindowStackId;
+                        mLeftDockWindowStackId = -1;
+                    }
+                } else {
+                    if (node.mStackBoxNode.children[1] != null) {
+                        queue.add(new CombinedStackBoxInfo(
+                                    node.mStackBoxNode.children[1], !node.oddNote));
+                    }
+                    if (node.mStackBoxNode.children[0] != null) {
+                        queue.add(new CombinedStackBoxInfo(
+                                    node.mStackBoxNode.children[0], !node.oddNote));
+                    }
+                }
+
+                if ((mDockWindowStackId!=-1) || (mLeftDockWindowStackId!=-1)){
+                    mNewWindowsplitPolicy = (node.oddNote)?5:3;
+                    return;
+                }
+            }
+
+        }
+        return;
+    }
+
+}
diff --git a/packages/SystemUI/src/com/android/systemui/splitbar/view/InOutImageButton.java b/packages/SystemUI/src/com/android/systemui/splitbar/view/InOutImageButton.java
new file mode 100644
index 0000000..07e6952
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/splitbar/view/InOutImageButton.java
@@ -0,0 +1,49 @@
+package com.android.systemui.splitbar.view;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.animation.Animation;
+import android.widget.ImageButton;
+
+import com.android.systemui.splitbar.view.animation.InOutAnimation;
+
+public class InOutImageButton extends ImageButton {
+
+    private Animation mAnimation;
+
+    public InOutImageButton(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    public InOutImageButton(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public InOutImageButton(Context context) {
+        super(context);
+    }
+
+    @Override
+    protected void onAnimationEnd() {
+        super.onAnimationEnd();
+        if ((this.mAnimation instanceof InOutAnimation)) {
+            setVisibility(((InOutAnimation) this.mAnimation).mDirection != InOutAnimation.Direction.OUT ? View.VISIBLE
+                    : View.GONE);
+        }
+    }
+
+    @Override
+    protected void onAnimationStart() {
+        super.onAnimationStart();
+        if ((this.mAnimation instanceof InOutAnimation))
+            setVisibility(View.VISIBLE);
+    }
+
+    @Override
+    public void startAnimation(Animation animation) {
+        super.startAnimation(animation);
+        this.mAnimation = animation;
+        getRootView().postInvalidate();
+    }
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/splitbar/view/InOutRelativeLayout.java b/packages/SystemUI/src/com/android/systemui/splitbar/view/InOutRelativeLayout.java
new file mode 100644
index 0000000..5487365
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/splitbar/view/InOutRelativeLayout.java
@@ -0,0 +1,50 @@
+package com.android.systemui.splitbar.view;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.animation.Animation;
+import android.widget.RelativeLayout;
+
+import com.android.systemui.splitbar.view.animation.InOutAnimation;
+
+public class InOutRelativeLayout extends RelativeLayout {
+
+    private Animation mAnimation;
+
+    public InOutRelativeLayout(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    public InOutRelativeLayout(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public InOutRelativeLayout(Context context) {
+        super(context);
+    }
+
+    @Override
+    protected void onAnimationEnd() {
+        super.onAnimationEnd();
+        if (this.mAnimation instanceof InOutAnimation) {
+            setVisibility(((InOutAnimation) mAnimation).mDirection != InOutAnimation.Direction.OUT ? View.VISIBLE
+                    : View.GONE);
+        }
+    }
+
+    @Override
+    protected void onAnimationStart() {
+        super.onAnimationStart();
+        if (this.mAnimation instanceof InOutAnimation) {
+            setVisibility(View.VISIBLE);
+        }
+    }
+
+    @Override
+    public void startAnimation(Animation animation) {
+        super.startAnimation(animation);
+        this.mAnimation = animation;
+        getRootView().postInvalidate();
+    }
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/splitbar/view/animation/InOutAnimation.java b/packages/SystemUI/src/com/android/systemui/splitbar/view/animation/InOutAnimation.java
new file mode 100644
index 0000000..f463d2e
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/splitbar/view/animation/InOutAnimation.java
@@ -0,0 +1,32 @@
+package com.android.systemui.splitbar.view.animation;
+
+import android.view.View;
+import android.view.animation.AnimationSet;
+
+public abstract class InOutAnimation extends AnimationSet {
+
+    public Direction mDirection;
+
+    public enum Direction {
+        IN, OUT;
+    }
+
+    public InOutAnimation(Direction direction, long l, View[] aview) {
+        super(true);
+        this.mDirection = direction;
+        switch (this.mDirection) {
+        case IN:
+            addInAnimation(aview);
+            break;
+        case OUT:
+            addOutAnimation(aview);
+            break;
+        }
+        setDuration(l);
+    }
+
+    protected abstract void addInAnimation(View aview[]);
+
+    protected abstract void addOutAnimation(View aview[]);
+
+}
diff --git a/packages/SystemUI/src/com/android/systemui/splitbar/view/animation/MenuButtonAnimation.java b/packages/SystemUI/src/com/android/systemui/splitbar/view/animation/MenuButtonAnimation.java
new file mode 100644
index 0000000..cf9416b
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/splitbar/view/animation/MenuButtonAnimation.java
@@ -0,0 +1,130 @@
+package com.android.systemui.splitbar.view.animation;
+
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.animation.AnticipateInterpolator;
+import android.view.animation.OvershootInterpolator;
+import android.view.animation.TranslateAnimation;
+
+import com.android.systemui.splitbar.view.InOutImageButton;
+import com.android.systemui.R;
+
+public class MenuButtonAnimation extends InOutAnimation {
+
+    public static final int DURATION = 500;
+    private static final int xOffset = -50;
+    private static final int yOffset = 50;
+
+    public MenuButtonAnimation(Direction direction, long l, View view) {
+        super(direction, l, new View[] { view });
+    }
+
+    public static void startAnimations(ViewGroup viewgroup,
+            InOutAnimation.Direction direction) {
+        switch (direction) {
+        case IN:
+            startAnimationsIn(viewgroup);
+            break;
+        case OUT:
+            startAnimationsOut(viewgroup);
+            break;
+        }
+    }
+
+    private static void startAnimationsIn(ViewGroup viewgroup) {
+        for (int i = 0; i < viewgroup.getChildCount(); i++) {
+            if (viewgroup.getChildAt(i) instanceof InOutImageButton) {
+                InOutImageButton inoutimagebutton = (InOutImageButton) viewgroup
+                        .getChildAt(i);
+                MenuButtonAnimation animation = new MenuButtonAnimation(
+                        InOutAnimation.Direction.IN, DURATION, inoutimagebutton);
+                animation.setStartOffset((i * 100)
+                        / (-1 + viewgroup.getChildCount()));
+                animation.setInterpolator(new OvershootInterpolator(2F));
+                inoutimagebutton.startAnimation(animation);
+            }
+        }
+    }
+
+    private static void startAnimationsOut(ViewGroup viewgroup) {
+        for (int i = 0; i < viewgroup.getChildCount(); i++) {
+            if (viewgroup.getChildAt(i) instanceof InOutImageButton) {
+                InOutImageButton inoutimagebutton = (InOutImageButton) viewgroup
+                        .getChildAt(i);
+                MenuButtonAnimation animation = new MenuButtonAnimation(
+                        InOutAnimation.Direction.OUT, DURATION,
+                        inoutimagebutton);
+                animation.setStartOffset((100 * ((-1 + viewgroup
+                        .getChildCount()) - i))
+                        / (-1 + viewgroup.getChildCount()));
+                animation.setInterpolator(new AnticipateInterpolator(2F));
+                inoutimagebutton.startAnimation(animation);
+            }
+        }
+    }
+
+    @Override
+    protected void addInAnimation(View[] aview) {
+        switch (aview[0].getId()) {
+        case R.id.menu_add_first:
+        case R.id.button_view_first:
+            addAnimation(new TranslateAnimation(-xOffset, 0F, 0F, 0F));
+            break;
+        case R.id.button_view_second:
+            addAnimation(new TranslateAnimation(-xOffset, 0F, yOffset, 0F));
+            break;
+        case R.id.menu_add_second:
+        case R.id.button_view_third:
+            addAnimation(new TranslateAnimation(0F, 0F, yOffset, 0F));
+            break;
+        case R.id.button_view_forth:
+            addAnimation(new TranslateAnimation(xOffset, 0F, yOffset, 0F));
+            break;
+        case R.id.menu_max_first:
+        case R.id.button_view_Fifth:
+            addAnimation(new TranslateAnimation(xOffset, 0F, 0F, 0F));
+            break;
+        case R.id.button_view_sixth:
+            addAnimation(new TranslateAnimation(xOffset, 0F, -yOffset, 0F));
+            break;
+        case R.id.menu_max_second:
+        case R.id.button_view_seventh:
+            addAnimation(new TranslateAnimation(0F, 0F, -yOffset, 0F));
+            break;
+        case R.id.button_view_eighth:
+            addAnimation(new TranslateAnimation(-xOffset, 0F, -yOffset, 0F));
+            break;
+        }
+    }
+
+    @Override
+    protected void addOutAnimation(View[] aview) {
+        addAnimation(new TranslateAnimation(0F, 0F, 0F, 0F));
+//        switch(aview[0].getId()){
+//        case R.id.button_view_first:
+//            addAnimation(new TranslateAnimation(0F, -xOffset, 0F, 0F));
+//            break;
+//        case R.id.button_view_second:
+//            addAnimation(new TranslateAnimation(0F, -xOffset, 0F, yOffset));
+//            break;
+//        case R.id.button_view_third:
+//            addAnimation(new TranslateAnimation(0F, 0F, 0F, yOffset));
+//            break;
+//        case R.id.button_view_forth:
+//            addAnimation(new TranslateAnimation(0F, xOffset, 0F, yOffset));
+//            break;
+//        case R.id.button_view_Fifth:
+//            addAnimation(new TranslateAnimation(0F, xOffset, 0F, 0F));
+//            break;
+//        case R.id.button_view_sixth:
+//            addAnimation(new TranslateAnimation(0F, xOffset, 0F, -yOffset));
+//            break;
+//        case R.id.button_view_seventh:
+//            addAnimation(new TranslateAnimation(0F, 0F, 0F, -yOffset));
+//            break;
+//        case R.id.button_view_eighth:
+//            addAnimation(new TranslateAnimation(0F, -xOffset, 0F, -yOffset));
+//            break;
+//        }
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
index ed00398..602b8dd 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
@@ -90,6 +90,7 @@ public abstract class BaseStatusBar extends SystemUI implements
     protected static final int MSG_SHOW_HEADS_UP = 1026;
     protected static final int MSG_HIDE_HEADS_UP = 1027;
     protected static final int MSG_ESCALATE_HEADS_UP = 1028;
+    protected static final int MSG_SHOW_MULTI_WINDOW_IF_NEED = 1029;
 
     protected static final boolean ENABLE_HEADS_UP = true;
     // scores above this threshold should be displayed in heads up mode.
@@ -102,6 +103,10 @@ public abstract class BaseStatusBar extends SystemUI implements
     public static final int EXPANDED_LEAVE_ALONE = -10000;
     public static final int EXPANDED_FULL_OPEN = -10001;
 
+/*Begin,Lenovo-sw Tom_liming11 add 2014-02-15, add for SystemUI about MultiWindow */
+    public boolean isShow = false;
+/*End,Lenovo-sw Tom_liming11 add 2014-02-15, add for SystemUI about MultiWindow */
+
     protected CommandQueue mCommandQueue;
     protected IStatusBarService mBarService;
     protected H mHandler = createHandler();
@@ -426,6 +431,10 @@ public abstract class BaseStatusBar extends SystemUI implements
 
     @Override
     public void toggleRecentApps() {
+        /*Begin,Lenovo-sw Tom_liming11 add 2014-02-15, add for SystemUI about MultiWindow */
+        isShow = Settings.Global.getInt(mContext.getContentResolver(),
+                Settings.Global.SYSTEM_UI_USRGUIDE, 0) != 0;
+        /*End,Lenovo-sw Tom_liming11 add 2014-02-15, add for SystemUI about MultiWindow */
         int msg = MSG_TOGGLE_RECENTS_PANEL;
         mHandler.removeMessages(msg);
         mHandler.sendEmptyMessage(msg);
@@ -553,7 +562,17 @@ public abstract class BaseStatusBar extends SystemUI implements
             Intent intent;
             switch (m.what) {
              case MSG_TOGGLE_RECENTS_PANEL:
-                 toggleRecentsActivity();
+                 /*Begin,Lenovo-sw Tom_liming11 add 2014-02-15, add for SystemUI about MultiWindow */
+                 if(!isShow){
+                     Intent help_intent = new Intent();
+                     help_intent.setClassName("com.android.systemui",
+                             "com.android.systemui.lenovo.usrguide.usrguideActivity");
+                     mContext.startActivityAsUser(help_intent, new UserHandle(
+                             UserHandle.USER_CURRENT));
+                 }else{
+                	 toggleRecentsActivity();
+                 }
+                 /*End,Lenovo-sw Tom_liming11 add 2014-02-15, add for SystemUI about MultiWindow */
                  break;
              case MSG_CLOSE_RECENTS_PANEL:
                  closeRecents();
@@ -578,6 +597,19 @@ public abstract class BaseStatusBar extends SystemUI implements
                      onHideSearchPanel();
                  }
                  break;
+             case MSG_SHOW_MULTI_WINDOW_IF_NEED:
+                 if (DEBUG) Log.d(TAG, "show multi window if need");
+                 try {
+                     if (!ActivityManagerNative.getDefault().showMultiWindow()) {
+                         if (DEBUG) Log.d(TAG, "no need to show multi window, just toggle recent");
+                         toggleRecentsActivity();
+                     } else {
+                         if (DEBUG) Log.d(TAG, "show multi window successfully");
+                     }
+                 } catch (RemoteException e) {
+                     Log.w(TAG, "unexpected exception when showing multi window", e);
+                 }
+                 break;
             }
         }
     }
